{"version":3,"file":"paymail-client.esm.js","sources":["../src/constants.js","../src/errors/PaymailServerError.js","../src/dns-client.js","../src/dns-over-https.js","../src/http.js","../src/EndpointResolver.js","../src/VerifiableMessage.js","../src/RequestBodyFactory.js","../src/Clock.js","../src/errors/PaymailNotFound.js","../src/BrowserDns.js","../src/errors/ProtocolNotSupported.js","../src/errors/AssetNotAccepted.js","../src/PaymailClient.js"],"sourcesContent":["import { brfc } from \"brfc\";\n\nexport const CapabilityCodes = {\n  pki: \"pki\",\n  paymentDestination: \"paymentDestination\",\n  requestSenderValidation: brfc(\n    \"bsvalias Payment Addressing (Payer Validation)\",\n    [\"andy (nChain)\"],\n    \"\"\n  ),\n  verifyPublicKeyOwner: brfc(\n    \"bsvalias public key verify (Verify Public Key Owner)\",\n    [],\n    \"\"\n  ),\n  publicProfile: brfc(\n    \"Public Profile (Name & Avatar)\",\n    [\"Ryan X. Charles (Money Button)\"],\n    \"1\"\n  ),\n  receiveTransaction: brfc(\n    \"Send raw transaction\",\n    [\n      \"Miguel Duarte (Money Button)\",\n      \"Ryan X. Charles (Money Button)\",\n      \"Ivan Mlinaric (Handcash)\",\n      \"Rafa (Handcash)\",\n    ],\n    \"1.1\"\n  ),\n  p2pPaymentDestination: brfc(\n    \"Get no monitored payment destination (p2p payment destination)\",\n    [\n      \"Miguel Duarte (Money Button)\",\n      \"Ryan X. Charles (Money Button)\",\n      \"Ivan Mlinaric (Handcash)\",\n      \"Rafa (Handcash)\",\n    ],\n    \"1.1\"\n  ),\n  assetInformation: brfc(\"Asset Information\", [\"Fabriik\"], \"1\"),\n  p2pPaymentDestinationWithTokensSupport: brfc(\n    \"P2P Payment Destination with Tokens Support\",\n    [\"Fabriik\"],\n    \"1\"\n  ),\n  sfpBuildAction: brfc(\n    \"Simple Fabriik Protocol for Tokens Build Action\",\n    [\"Fabriik\"],\n    \"1\"\n  ),\n  sfpAuthoriseAction: brfc(\n    \"Simple Fabriik Protocol for Tokens Authorise Action\",\n    [\"Fabriik\"],\n    \"1\"\n  ),\n};\n","class PaymailServerError extends Error {\n\n}\n\nexport { PaymailServerError }\n","// import { DnsOverHttps } from \"./dns-over-https\"\n\nimport { PaymailServerError } from './errors/PaymailServerError'\n\nclass DnsClient {\n  constructor (dns, doh) {\n    this.dns = dns\n    this.doh = doh\n  }\n\n  async checkSrv (aDomain) {\n    return new Promise((resolve, reject) => {\n      this.dns.resolveSrv(`_bsvalias._tcp.${aDomain}`, async (err, result) => {\n        try {\n          if (err && (err.code === 'ENODATA' || err.code === 'ENOTFOUND')) {\n            return resolve({\n              domain: aDomain,\n              port: 443,\n              isSecure: true\n            })\n          }\n          if (err) {\n            return reject(err)\n          }\n\n          const { name: domainFromDns, port, isSecure } = result[0]\n          resolve({\n            domain: domainFromDns,\n            port,\n            isSecure: this.checkDomainIsSecure(domainFromDns, aDomain) || isSecure\n          })\n        } catch (err) {\n          return reject(err)\n        }\n      })\n    }).then(result => {\n      if (result.isSecure) {\n        return result\n      } else {\n        return this.validateDnssec(aDomain)\n      }\n    }, (err) => {\n      console.error(err)\n      return err\n    })\n  }\n\n  checkDomainIsSecure (srvResponseDomain, originalDomain) {\n    if (this.domainsAreEqual(srvResponseDomain, originalDomain)) {\n      return true\n    } else if (this.responseIsWwwSubdomain(srvResponseDomain, originalDomain)) {\n      return true\n    } else if (this.isHandcashDomain(originalDomain)) { // tell rafa to fix handcash and we can remove the special case :)\n      return this.domainsAreEqual('handcash-paymail-production.herokuapp.com', srvResponseDomain) || this.domainsAreEqual('handcash-cloud-production.herokuapp.com', srvResponseDomain)\n    } else if (this.isHandcashInternalDomain(originalDomain)) {\n      return this.domainsAreEqual('handcash-cloud-staging.herokuapp.com', srvResponseDomain)\n    } else if (this.domainsAreEqual('localhost', srvResponseDomain)) {\n      return true\n    } else if (this.isMoneyButtonDomain(srvResponseDomain)) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  isMoneyButtonDomain (aDomain) {\n    return this.domainsAreEqual(aDomain, 'moneybutton.com') || this.domainsAreEqual(aDomain, 'www.moneybutton.com')\n  }\n\n  responseIsWwwSubdomain (srvResponseDomain, originalDomain) {\n    return this.domainsAreEqual(srvResponseDomain, `www.${originalDomain}`)\n  }\n\n  isHandcashDomain (aDomain) {\n    return this.domainsAreEqual('handcash.io', aDomain)\n  }\n\n  isHandcashInternalDomain (aDomain) {\n    return this.domainsAreEqual('internal.handcash.io', aDomain)\n  }\n\n  async validateDnssec (aDomain) {\n    const dnsResponse = await this.doh.queryBsvaliasDomain(aDomain)\n    if (dnsResponse.Status !== 0 || !dnsResponse.Answer) {\n      throw new PaymailServerError(`${aDomain} is not correctly configured: insecure domain`)\n    }\n    const data = dnsResponse.Answer[0].data.split(' ')\n    const port = data[2]\n    const responseDomain = data[3]\n    if (!dnsResponse.AD && !this.domainsAreEqual(aDomain, responseDomain)) {\n      throw new PaymailServerError(`${aDomain} is not correctly configured: insecure domain`)\n    }\n    return {\n      port,\n      domain: responseDomain,\n      isSecure: dnsResponse.AD\n    }\n  }\n\n  domainsAreEqual (domain1, domain2) {\n    return domain1.replace(/\\.$/, '') === domain2.replace(/\\.$/, '')\n  }\n}\n\nexport { DnsClient }\n","class DnsOverHttps {\n  constructor (fetch, config) {\n    this.fetch = fetch\n    this.config = config\n  }\n\n  async resolveSrv (aDomain) {\n    const response = await this.fetch(`${this.config.baseUrl}?name=${aDomain}&type=SRV&cd=0`)\n    const body = await response.json()\n    return body\n  }\n\n  async queryBsvaliasDomain (aDomain) {\n    return this.resolveSrv(`_bsvalias._tcp.${aDomain}`)\n  }\n}\n\nexport { DnsOverHttps }\n","import AbortController from 'abort-controller'\n\nclass Http {\n  constructor (fetch) {\n    this.fetch = fetch\n  }\n\n  async get (url) {\n    return this._basicRequest(url)\n  }\n\n  async postJson (url, body) {\n    return this._basicRequest(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    })\n  }\n\n  async _basicRequest (url, options = {}) {\n    var controller = new AbortController()\n    const timer = setTimeout(() => controller.abort(), 30000)\n    return this.fetch(url, {\n      ...options,\n      credentials: 'omit',\n      signal: controller.signal\n    }).then(result => {\n      clearTimeout(timer)\n      return result\n    })\n  }\n}\n\nexport { Http }\n","import { CapabilityCodes } from './constants'\nimport { DnsClient } from './dns-client'\nimport { DnsOverHttps } from './dns-over-https'\nimport { PaymailServerError } from './errors/PaymailServerError'\nimport { Http } from './http'\nimport PureCache from 'pure-cache'\n\nclass EndpointResolver {\n  constructor (dns = null, fetch, defaultCacheTTL = 0) {\n    this.dnsClient = new DnsClient(dns, new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' }))\n\n    this.http = new Http(fetch)\n    this.defaultCacheTTL = defaultCacheTTL\n    if (defaultCacheTTL) {\n      this.cache = new PureCache({\n        expiryCheckInterval: 10000\n      })\n      if (this.cache.cacheExpirer.timer.unref) {\n        this.cache.cacheExpirer.timer.unref()\n      }\n    }\n  }\n\n  static create (dnsClient, fetch) {\n    const instance = new EndpointResolver(null, fetch)\n    instance.dnsClient = dnsClient\n    return instance\n  }\n\n  async getIdentityUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.pki)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const identityUrl = apiDescriptor.capabilities.pki\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return identityUrl\n  }\n\n  async getAddressUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.paymentDestination)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const addressUrl = apiDescriptor.capabilities.paymentDestination\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return addressUrl\n  }\n\n  async getVerifyUrlFor (aPaymail, aPubkey) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.verifyPublicKeyOwner)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.verifyPublicKeyOwner]\n      .replace('{alias}', alias).replace('{domain.tld}', domain).replace('{pubkey}', aPubkey)\n    return url\n  }\n\n  async getPublicProfileUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.publicProfile)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.publicProfile]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getSendTxUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.receiveTransaction)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.receiveTransaction]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getP2pPaymentDestinationUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.p2pPaymentDestination)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.p2pPaymentDestination]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getP2pPaymentDestinationWithTokensSupportUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.p2pPaymentDestinationWithTokensSupport)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.p2pPaymentDestinationWithTokensSupport]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getSfpBuildActionUrlFor (aPaymail) {\n    const [, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.sfpBuildAction)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.sfpBuildAction]\n    return url\n  }\n\n  async getSfpAuthoriseActionUrlFor (aPaymail) {\n    const [, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.sfpAuthoriseAction)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.sfpAuthoriseAction]\n    return url\n  }\n\n  async getAssetInformationUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.assetInformation)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.assetInformation]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async domainHasCapability (aDomain, capability) {\n    const apiDescriptor = await this.getApiDescriptionFor(aDomain)\n    return apiDescriptor.capabilities && !!apiDescriptor.capabilities[capability]\n  }\n\n  async getApiDescriptionFor (aDomain) {\n    let apiDescriptor = this.cache && this.cache.get(aDomain)\n    if (apiDescriptor) {\n      return apiDescriptor.value\n    }\n    const { domain, port } = await this.getWellKnownBaseUrl(aDomain)\n    apiDescriptor = await this.fetchApiDescriptor(domain, port)\n    this.cache && this.cache.put(aDomain, apiDescriptor, this.defaultCacheTTL)\n    return apiDescriptor\n  }\n\n  async fetchApiDescriptor (domain, port) {\n    const protocol = (domain === 'localhost' || domain === 'localhost.') ? 'http' : 'https'\n    const requestPort = port.toString() === '443' ? '' : `:${port}`\n    const requestDomain = /^(.*?)\\.?$/.exec(domain)[1] // Get value from capture group\n    if (!requestDomain) {\n      throw new Error(`Invalid domain: ${domain}`)\n    }\n    try {\n      const wellKnown = await this.http.get(`${protocol}://${requestDomain}${requestPort}/.well-known/bsvalias`)\n      const apiDescriptor = await wellKnown.json()\n      return apiDescriptor\n    } catch (err) {\n      if (err.message.includes('invalid json response') || err.message.includes('Unexpected token')) {\n        throw new PaymailServerError(`Paymail server at ${domain} returned an invalid capabilities description`)\n      }\n      if (err.message.includes('getaddrinfo ENOTFOUND')) {\n        throw new PaymailServerError(`Couldn't find domain ${domain}`)\n      }\n      if (err.message.includes('failed')) {\n        throw new PaymailServerError(`Couldn't connect to domain ${domain}`)\n      }\n      throw err\n    }\n  }\n\n  async getWellKnownBaseUrl (aDomain) {\n    return this.dnsClient.checkSrv(aDomain)\n  }\n\n  async ensureCapabilityFor (aDomain, aCapability) {\n    if (!await this.domainHasCapability(aDomain, aCapability)) {\n      throw new Error(`Unknown capability \"${aCapability}\" for \"${aDomain}\"`)\n    }\n  }\n}\n\nexport { EndpointResolver }\n","class VerifiableMessage {\n  constructor (parts, bsv = null) {\n    if (bsv === null) {\n      bsv = require('bsv')\n    }\n    this.bsv = bsv\n    this.concatenated = Buffer.from(parts.join(''))\n  }\n\n  static forBasicAddressResolution ({\n    senderHandle,\n    amount,\n    dt,\n    purpose\n  }) {\n    if (dt.toISOString) {\n      dt = dt.toISOString()\n    }\n\n    return new VerifiableMessage([\n      senderHandle,\n      amount || '0',\n      dt,\n      purpose\n    ])\n  }\n\n  sign (wifPrivKey) {\n    let privKey = this.bsv.PrivKey.fromWif(wifPrivKey)\n    let keyPair = this.bsv.KeyPair.fromPrivKey(privKey)\n    return this.bsv.Bsm.sign(this.concatenated, keyPair)\n  }\n\n  verify (keyAddress, signature) {\n    return this.bsv.Bsm.verify(this.concatenated, signature, this.bsv.Address.fromString(keyAddress))\n  }\n}\n\nexport { VerifiableMessage }\n","import { VerifiableMessage } from './VerifiableMessage'\n\nclass RequestBodyFactory {\n  constructor (clock) {\n    this.clock = clock\n  }\n  buildBodyToRequestAddress (senderInfo, privateKey = null) {\n    const {\n      senderHandle,\n      amount,\n      senderName,\n      purpose,\n      pubkey,\n      signature: providedSignature\n    } = senderInfo\n\n    if (!providedSignature && privateKey === null) {\n      throw new Error('Missing private key or signature')\n    }\n\n    let dt, signature\n    if (providedSignature) {\n      if (!senderInfo.dt) {\n        throw new Error('missing datetime for given signature')\n      }\n      dt = senderInfo.dt\n      signature = providedSignature\n    } else {\n      dt = this.clock.now()\n      signature = VerifiableMessage.forBasicAddressResolution({\n        senderHandle,\n        amount,\n        dt,\n        purpose\n      }).sign(privateKey)\n    }\n\n    return {\n      senderHandle,\n      senderName,\n      purpose,\n      dt,\n      amount: amount || null,\n      pubkey,\n      signature\n    }\n  }\n\n  buildBodySendTx (hexTransaction, reference, metadata) {\n    return { hex: hexTransaction, metadata, reference }\n  }\n\n  buildBodyP2pPaymentDestination (satoshis) {\n    return { satoshis }\n  }\n}\n\nexport { RequestBodyFactory }\n","import moment from 'moment'\n\nclass Clock {\n  now () {\n    return moment()\n  }\n}\n\nexport { Clock }\n","class PaymailNotFound extends Error {\n  constructor (message, paymail) {\n    super(message)\n    this.paymail = paymail\n  }\n}\n\nexport { PaymailNotFound }\n","import { DnsOverHttps } from './dns-over-https'\n\nclass BrowserDns {\n  constructor (fetch) {\n    this.doh = new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' })\n  }\n\n  async resolveSrv (aDomain, aCallback) {\n    try {\n      const response = await this.doh.resolveSrv(aDomain)\n      if (response.Status === 0 && response.Answer) {\n        const data = response.Answer.map(record => {\n          const [ priority, weight, port, name ] = record.data.split(' ')\n          return {\n            priority,\n            weight,\n            port,\n            name,\n            isSecure: response.AD\n          }\n        })\n        aCallback(null, data)\n      } else if (response.Status === 3 || !response.Answer) {\n        aCallback({ code: 'ENODATA' })\n      } else {\n        aCallback(new Error('error during dns query'))\n      }\n    } catch (e) {\n      aCallback(e)\n    }\n  }\n}\n\nexport { BrowserDns }\n","class ProtocolNotSupported extends Error {\n  constructor (message, protocol) {\n    super(message)\n    this.protocol = protocol\n  }\n}\n\nexport { ProtocolNotSupported }\n","class AssetNotAccepted extends Error {\n  constructor (message, asset) {\n    super(message)\n    this.asset = asset\n  }\n}\n\nexport { AssetNotAccepted }\n","import { EndpointResolver } from \"./EndpointResolver\";\nimport { VerifiableMessage } from \"./VerifiableMessage\";\nimport { RequestBodyFactory } from \"./RequestBodyFactory\";\nimport { Clock } from \"./Clock\";\nimport { PaymailNotFound } from \"./errors/PaymailNotFound\";\nimport { CapabilityCodes } from \"./constants\";\nimport fetch from \"node-fetch\";\nimport { BrowserDns } from \"./BrowserDns\";\nimport { Http } from \"./http\";\nimport HttpStatus from \"http-status-codes\";\nimport { ProtocolNotSupported } from \"./errors/ProtocolNotSupported\";\nimport { AssetNotAccepted } from \"./errors/AssetNotAccepted\";\nimport { PaymailServerError } from \"./errors/PaymailServerError\";\n\nclass PaymailClient {\n  constructor(dns = null, fetch2 = null, clock = null, bsv = null) {\n    let defaultCacheTTL = 3600 * 1000;\n\n    if (fetch2 === null) {\n      fetch2 = fetch;\n    }\n    if (dns === null) {\n      dns = new BrowserDns(fetch2);\n      defaultCacheTTL = 0;\n    }\n    if (bsv === null) {\n      bsv = require(\"bsv\");\n    }\n    this.bsv = bsv;\n    this.resolver = new EndpointResolver(dns, fetch2, defaultCacheTTL);\n    this.http = new Http(fetch2);\n    this.requestBodyFactory = new RequestBodyFactory(\n      clock !== null ? clock : new Clock()\n    );\n    this.VerifiableMessage = VerifiableMessage;\n  }\n\n  /**\n   * Uses pki flow to query for an identity key for a given paymail address.\n   *\n   * @param {String} paymail - a paymail address\n   */\n  async getPublicKey(paymail) {\n    const identityUrl = await this.resolver.getIdentityUrlFor(paymail);\n    const response = await this.http.get(identityUrl);\n    const { pubkey } = await response.json();\n    return pubkey;\n  }\n\n  /**\n   * Uses `Basic Address Resolution` flow to query for a payment for output for the\n   * given paymail address.\n   *\n   * @param {String} aPaymail - a paymail address\n   * @param {Object} senderInfo - Object containing sender info\n   * @param {String} senderInfo.senderHandle - Sender paymail address\n   * @param {String} senderInfo.amount - Optional. Required amount.\n   * @param {String} senderInfo.senderName - Optional. Sender name.\n   * @param {String} senderInfo.purpose - Optional. Purpose of the payment.\n   * @param {String} senderInfo.pubkey - Optional. Public key used to sign the message.\n   * @param {String} senderInfo.signature - Optional. Valid signature according to paymail specification.\n   * @param {String} privateKey - Optional. private key to sign the request.\n   */\n  async getOutputFor(aPaymail, senderInfo, privateKey = null) {\n    const addressUrl = await this.resolver.getAddressUrlFor(aPaymail);\n    const body = this.requestBodyFactory.buildBodyToRequestAddress(\n      senderInfo,\n      privateKey\n    );\n    const response = await this.http.postJson(addressUrl, body);\n\n    if (response.status === HttpStatus.NOT_FOUND) {\n      throw new PaymailNotFound(`Paymail not found: ${aPaymail}`, aPaymail);\n    } else if (!response.ok) {\n      throw new Error(`Server failed with: ${await response.text()}`);\n    }\n    const { output } = await response.json();\n    return output;\n  }\n\n  /**\n   * Verify if the given public address belongs to the given\n   * paymail address.\n   *\n   * @param {String} pubkey - Public key to check.\n   * @param {String} paymail - a paymail address\n   */\n  async verifyPubkeyOwner(pubkey, paymail) {\n    const url = await this.resolver.getVerifyUrlFor(paymail, pubkey);\n    const response = await this.http.get(url);\n    const body = await response.json();\n    const { match } = body;\n    return match;\n  }\n\n  /**\n   * Verifies if a given signature is valid for a given message. It uses\n   * different strategies depending on the capabilities of the server\n   * and the parameters Given. The priority order is.\n   * - If paymail is not provided, then normal signature verification is performed.\n   * - Use provided key (and check that belongs to given paymail address).\n   * - Get a new pubkey for given paymail address using pki.\n   * - If there is no way to intereact with the owner of the domain to verify the public key it returns false.\n   *\n   * @param {Message} message - Message to verify\n   * @param {String} signature - Signature\n   * @param {String} paymail - Signature owner paymail\n   * @param {String} pubkey - Optional. Public key that validates the signature.\n   */\n  async isValidSignature(message, signature, paymail = null, pubkey = null) {\n    if (paymail == null && pubkey === null) {\n      throw new Error(\"Must specify either paymail or pubkey\");\n    }\n    let senderPubKey;\n    if (paymail) {\n      if (\n        pubkey &&\n        (await this.resolver.domainHasCapability(\n          paymail.split(\"@\")[1],\n          CapabilityCodes.verifyPublicKeyOwner\n        ))\n      ) {\n        if (await this.verifyPubkeyOwner(pubkey, paymail)) {\n          senderPubKey = this.bsv.PubKey.fromString(pubkey);\n        } else {\n          return false;\n        }\n      } else {\n        const hasPki = await this.resolver.domainHasCapability(\n          paymail.split(\"@\")[1],\n          CapabilityCodes.pki\n        );\n        if (hasPki) {\n          const identityKey = await this.getPublicKey(paymail);\n          senderPubKey = this.bsv.PubKey.fromString(identityKey);\n        } else {\n          return false;\n        }\n      }\n    }\n\n    const senderKeyAddress = this.bsv.Address.fromPubKey(\n      senderPubKey || pubkey\n    );\n    try {\n      const verified = message.verify(senderKeyAddress.toString(), signature);\n      return verified;\n    } catch (err) {\n      // console.log(err)\n      return false;\n    }\n  }\n\n  /**\n   * Gets the public profile information using the \"Public Profile\" protocol.\n   *\n   * @param {String} paymail - a paymail address\n   * @param {String} s - the preferred size of the image\n   */\n  async getPublicProfile(paymail) {\n    let publicProfileUrl = await this.resolver.getPublicProfileUrlFor(paymail);\n    const response = await this.http.get(publicProfileUrl);\n    if (!response.ok) {\n      const body = await response.json();\n      throw new Error(`Server failed with: ${JSON.stringify(body)}`);\n    }\n    const { avatar, name } = await response.json();\n    return { avatar, name };\n  }\n\n  async sendRawTx(targetPaymail, hexTransaction, reference, metadata = {}) {\n    if (!hexTransaction) {\n      throw new Error(\"transaction hex cannot be empty\");\n    }\n    let receiveTxUrl = await this.resolver.getSendTxUrlFor(targetPaymail);\n    const response = await this.http.postJson(\n      receiveTxUrl,\n      this.requestBodyFactory.buildBodySendTx(\n        hexTransaction,\n        reference,\n        metadata\n      )\n    );\n    if (!response.ok) {\n      const body = await response.text();\n      throw new Error(`Server failed with: ${body}`);\n    }\n    return response.json();\n  }\n\n  async getP2pPaymentDestination(targetPaymail, satoshis) {\n    if (!satoshis) {\n      throw new Error(\"Amount in satohis needs to be specified\");\n    }\n    let paymentDestinationUrl =\n      await this.resolver.getP2pPaymentDestinationUrlFor(targetPaymail);\n    const response = await this.http.postJson(\n      paymentDestinationUrl,\n      this.requestBodyFactory.buildBodyP2pPaymentDestination(satoshis)\n    );\n    if (response.status === HttpStatus.NOT_FOUND) {\n      throw new PaymailNotFound(\n        `Paymail ${targetPaymail} not found`,\n        targetPaymail\n      );\n    }\n    if (!response.ok) {\n      throw new PaymailServerError(\n        `Paymail server for ${targetPaymail} returned an invalid response`\n      );\n    }\n\n    const body = await response.json();\n    if (!body.outputs) {\n      throw new PaymailServerError(\n        \"Server answered with a wrong format. Missing outputs\"\n      );\n    }\n\n    return body;\n  }\n\n  async getP2pPaymentDestinationWithTokensSupport(\n    targetPaymail,\n    amount,\n    asset,\n    protocol\n  ) {\n    const UNAVAILABLE_FOR_LEGAL_REASONS = 451;\n    if (!amount) {\n      throw new Error(\"Amount needs to be specified\");\n    }\n    let paymentDestinationUrl =\n      await this.resolver.getP2pPaymentDestinationWithTokensSupportUrlFor(\n        targetPaymail\n      );\n    const response = await this.http.postJson(paymentDestinationUrl, {\n      amount,\n      asset,\n      protocol,\n    });\n    if (response.status === HttpStatus.NOT_ACCEPTABLE) {\n      throw new ProtocolNotSupported(\n        `Protocol ${protocol} is not supported by paymail ${targetPaymail}`,\n        protocol\n      );\n    }\n    if (response.status === HttpStatus.NOT_FOUND) {\n      throw new PaymailNotFound(\n        `Paymail ${targetPaymail} not found`,\n        targetPaymail\n      );\n    }\n    if (response.status === UNAVAILABLE_FOR_LEGAL_REASONS) {\n      throw new AssetNotAccepted(\n        `Paymail ${targetPaymail} cannot accept asset ${asset}`\n      );\n    }\n    if (!response.ok) {\n      throw new PaymailServerError(\n        `Paymail server for ${targetPaymail} returned an invalid response`\n      );\n    }\n\n    const body = await response.json();\n    if (!body.outputs) {\n      throw new PaymailServerError(\n        \"Server answered with a wrong format. Missing outputs\"\n      );\n    }\n\n    return body;\n  }\n\n  async sendSfpBuildAction(targetAssetPaymail, params) {\n    const buildActionUrl = await this.resolver.getSfpBuildActionUrlFor(\n      targetAssetPaymail\n    );\n    const response = await this.http.postJson(buildActionUrl, params);\n\n    if (!response.ok) {\n      const body = await response.json();\n      throw new PaymailServerError(body.message);\n    }\n\n    return response.json();\n  }\n\n  async sendSfpAuthoriseAction(targetAssetPaymail, params) {\n    let authoriseActionUrl = await this.resolver.getSfpAuthoriseActionUrlFor(\n      targetAssetPaymail\n    );\n    const response = await this.http.postJson(authoriseActionUrl, params);\n\n    if (!response.ok) {\n      const body = await response.json();\n      throw new Error(body.message);\n    }\n\n    return response.json();\n  }\n\n  async getAssetInformation(assetTargetPaymail) {\n    let assetInformationUrl = await this.resolver.getAssetInformationUrlFor(\n      assetTargetPaymail\n    );\n    const response = await this.http.get(assetInformationUrl);\n\n    if (response.status === HttpStatus.NOT_FOUND) {\n      throw new Error(`Asset ${assetTargetPaymail} was not found`);\n    }\n    if (!response.ok) {\n      const body = await response.text();\n      throw new Error(`Server failed with: ${body}`);\n    }\n\n    return response.json();\n  }\n}\n\nexport { PaymailClient };\n"],"names":["CapabilityCodes","pki","paymentDestination","requestSenderValidation","brfc","verifyPublicKeyOwner","publicProfile","receiveTransaction","p2pPaymentDestination","assetInformation","p2pPaymentDestinationWithTokensSupport","sfpBuildAction","sfpAuthoriseAction","PaymailServerError","Error","DnsClient","constructor","dns","doh","checkSrv","aDomain","Promise","resolve","reject","resolveSrv","err","result","code","domain","port","isSecure","name","domainFromDns","checkDomainIsSecure","then","validateDnssec","console","error","srvResponseDomain","originalDomain","domainsAreEqual","responseIsWwwSubdomain","isHandcashDomain","isHandcashInternalDomain","isMoneyButtonDomain","dnsResponse","queryBsvaliasDomain","Status","Answer","data","split","responseDomain","AD","domain1","domain2","replace","DnsOverHttps","fetch","config","response","baseUrl","body","json","Http","get","url","_basicRequest","postJson","method","headers","JSON","stringify","options","controller","AbortController","timer","setTimeout","abort","credentials","signal","clearTimeout","EndpointResolver","defaultCacheTTL","dnsClient","http","cache","PureCache","expiryCheckInterval","cacheExpirer","unref","create","instance","getIdentityUrlFor","aPaymail","alias","ensureCapabilityFor","apiDescriptor","getApiDescriptionFor","identityUrl","capabilities","getAddressUrlFor","addressUrl","getVerifyUrlFor","aPubkey","getPublicProfileUrlFor","getSendTxUrlFor","getP2pPaymentDestinationUrlFor","getP2pPaymentDestinationWithTokensSupportUrlFor","getSfpBuildActionUrlFor","getSfpAuthoriseActionUrlFor","getAssetInformationUrlFor","domainHasCapability","capability","value","getWellKnownBaseUrl","fetchApiDescriptor","put","protocol","requestPort","toString","requestDomain","exec","wellKnown","message","includes","aCapability","VerifiableMessage","parts","bsv","require","concatenated","Buffer","from","join","forBasicAddressResolution","senderHandle","amount","dt","purpose","toISOString","sign","wifPrivKey","privKey","PrivKey","fromWif","keyPair","KeyPair","fromPrivKey","Bsm","verify","keyAddress","signature","Address","fromString","RequestBodyFactory","clock","buildBodyToRequestAddress","senderInfo","privateKey","senderName","pubkey","providedSignature","now","buildBodySendTx","hexTransaction","reference","metadata","hex","buildBodyP2pPaymentDestination","satoshis","Clock","moment","PaymailNotFound","paymail","BrowserDns","aCallback","map","record","priority","weight","e","ProtocolNotSupported","AssetNotAccepted","asset","PaymailClient","fetch2","resolver","requestBodyFactory","getPublicKey","getOutputFor","status","HttpStatus","NOT_FOUND","ok","text","output","verifyPubkeyOwner","match","isValidSignature","senderPubKey","PubKey","hasPki","identityKey","senderKeyAddress","fromPubKey","verified","getPublicProfile","publicProfileUrl","avatar","sendRawTx","targetPaymail","receiveTxUrl","getP2pPaymentDestination","paymentDestinationUrl","outputs","getP2pPaymentDestinationWithTokensSupport","UNAVAILABLE_FOR_LEGAL_REASONS","NOT_ACCEPTABLE","sendSfpBuildAction","targetAssetPaymail","params","buildActionUrl","sendSfpAuthoriseAction","authoriseActionUrl","getAssetInformation","assetTargetPaymail","assetInformationUrl"],"mappings":"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"}