{"version":3,"file":"paymail-client.esm.js","sources":["../src/constants.js","../src/errors/PaymailServerError.js","../src/dns-client.js","../src/dns-over-https.js","../src/http.js","../src/EndpointResolver.js","../src/VerifiableMessage.js","../src/RequestBodyFactory.js","../src/Clock.js","../src/errors/PaymailNotFound.js","../src/BrowserDns.js","../src/errors/ProtocolNotSupported.js","../src/errors/AssetNotAccepted.js","../src/PaymailClient.js"],"sourcesContent":["import { brfc } from '@moneybutton/brfc'\n\nexport const CapabilityCodes = {\n  pki: 'pki',\n  paymentDestination: 'paymentDestination',\n  requestSenderValidation: brfc(\n    'bsvalias Payment Addressing (Payer Validation)',\n    ['andy (nChain)'],\n    ''\n  ),\n  verifyPublicKeyOwner: brfc(\n    'bsvalias public key verify (Verify Public Key Owner)',\n    [],\n    ''\n  ),\n  publicProfile: brfc(\n    'Public Profile (Name & Avatar)',\n    ['Ryan X. Charles (Money Button)'],\n    '1'\n  ),\n  receiveTransaction: brfc(\n    'Send raw transaction',\n    ['Miguel Duarte (Money Button)', 'Ryan X. Charles (Money Button)', 'Ivan Mlinaric (Handcash)', 'Rafa (Handcash)'],\n    '1.1'\n  ),\n  p2pPaymentDestination: brfc(\n    'Get no monitored payment destination (p2p payment destination)',\n    ['Miguel Duarte (Money Button)', 'Ryan X. Charles (Money Button)', 'Ivan Mlinaric (Handcash)', 'Rafa (Handcash)'],\n    '1.1'\n  ),\n  assetInformation: brfc(\n    'Asset Information',\n    ['Fabriik'],\n    '1'\n  ),\n  p2pPaymentDestinationWithTokensSupport: brfc(\n    'P2P Payment Destination with Tokens Support',\n    ['Fabriik'],\n    '1'\n  ),\n  sfpBuildAction: brfc(\n    'Simple Fabriik Protocol for Tokens Build Action',\n    ['Fabriik'],\n    '1'\n  ),\n  sfpAuthoriseAction: brfc(\n    'Simple Fabriik Protocol for Tokens Authorise Action',\n    ['Fabriik'],\n    '1'\n  )\n}\n","class PaymailServerError extends Error {\n\n}\n\nexport { PaymailServerError }\n","// import { DnsOverHttps } from \"./dns-over-https\"\n\nimport { PaymailServerError } from './errors/PaymailServerError'\n\nclass DnsClient {\n  constructor (dns, doh) {\n    this.dns = dns\n    this.doh = doh\n  }\n\n  async checkSrv (aDomain) {\n    return new Promise((resolve, reject) => {\n      this.dns.resolveSrv(`_bsvalias._tcp.${aDomain}`, async (err, result) => {\n        try {\n          if (err && (err.code === 'ENODATA' || err.code === 'ENOTFOUND')) {\n            return resolve({\n              domain: aDomain,\n              port: 443,\n              isSecure: true\n            })\n          }\n          if (err) {\n            return reject(err)\n          }\n\n          const { name: domainFromDns, port, isSecure } = result[0]\n          resolve({\n            domain: domainFromDns,\n            port,\n            isSecure: this.checkDomainIsSecure(domainFromDns, aDomain) || isSecure\n          })\n        } catch (err) {\n          return reject(err)\n        }\n      })\n    }).then(result => {\n      if (result.isSecure) {\n        return result\n      } else {\n        return this.validateDnssec(aDomain)\n      }\n    }, (err) => {\n      console.error(err)\n      return err\n    })\n  }\n\n  checkDomainIsSecure (srvResponseDomain, originalDomain) {\n    if (this.domainsAreEqual(srvResponseDomain, originalDomain)) {\n      return true\n    } else if (this.responseIsWwwSubdomain(srvResponseDomain, originalDomain)) {\n      return true\n    } else if (this.isHandcashDomain(originalDomain)) { // tell rafa to fix handcash and we can remove the special case :)\n      return this.domainsAreEqual('handcash-paymail-production.herokuapp.com', srvResponseDomain) || this.domainsAreEqual('handcash-cloud-production.herokuapp.com', srvResponseDomain)\n    } else if (this.isHandcashInternalDomain(originalDomain)) {\n      return this.domainsAreEqual('handcash-cloud-staging.herokuapp.com', srvResponseDomain)\n    } else if (this.domainsAreEqual('localhost', srvResponseDomain)) {\n      return true\n    } else if (this.isMoneyButtonDomain(srvResponseDomain)) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  isMoneyButtonDomain (aDomain) {\n    return this.domainsAreEqual(aDomain, 'moneybutton.com') || this.domainsAreEqual(aDomain, 'www.moneybutton.com')\n  }\n\n  responseIsWwwSubdomain (srvResponseDomain, originalDomain) {\n    return this.domainsAreEqual(srvResponseDomain, `www.${originalDomain}`)\n  }\n\n  isHandcashDomain (aDomain) {\n    return this.domainsAreEqual('handcash.io', aDomain)\n  }\n\n  isHandcashInternalDomain (aDomain) {\n    return this.domainsAreEqual('internal.handcash.io', aDomain)\n  }\n\n  async validateDnssec (aDomain) {\n    const dnsResponse = await this.doh.queryBsvaliasDomain(aDomain)\n    if (dnsResponse.Status !== 0 || !dnsResponse.Answer) {\n      throw new PaymailServerError(`${aDomain} is not correctly configured: insecure domain`)\n    }\n    const data = dnsResponse.Answer[0].data.split(' ')\n    const port = data[2]\n    const responseDomain = data[3]\n    if (!dnsResponse.AD && !this.domainsAreEqual(aDomain, responseDomain)) {\n      throw new PaymailServerError(`${aDomain} is not correctly configured: insecure domain`)\n    }\n    return {\n      port,\n      domain: responseDomain,\n      isSecure: dnsResponse.AD\n    }\n  }\n\n  domainsAreEqual (domain1, domain2) {\n    return domain1.replace(/\\.$/, '') === domain2.replace(/\\.$/, '')\n  }\n}\n\nexport { DnsClient }\n","class DnsOverHttps {\n  constructor (fetch, config) {\n    this.fetch = fetch\n    this.config = config\n  }\n\n  async resolveSrv (aDomain) {\n    const response = await this.fetch(`${this.config.baseUrl}?name=${aDomain}&type=SRV&cd=0`)\n    const body = await response.json()\n    return body\n  }\n\n  async queryBsvaliasDomain (aDomain) {\n    return this.resolveSrv(`_bsvalias._tcp.${aDomain}`)\n  }\n}\n\nexport { DnsOverHttps }\n","import AbortController from 'abort-controller'\n\nclass Http {\n  constructor (fetch) {\n    this.fetch = fetch\n  }\n\n  async get (url) {\n    return this._basicRequest(url)\n  }\n\n  async postJson (url, body) {\n    return this._basicRequest(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    })\n  }\n\n  async _basicRequest (url, options = {}) {\n    var controller = new AbortController()\n    const timer = setTimeout(() => controller.abort(), 30000)\n    return this.fetch(url, {\n      ...options,\n      credentials: 'omit',\n      signal: controller.signal\n    }).then(result => {\n      clearTimeout(timer)\n      return result\n    })\n  }\n}\n\nexport { Http }\n","import { CapabilityCodes } from './constants'\nimport { DnsClient } from './dns-client'\nimport { DnsOverHttps } from './dns-over-https'\nimport { PaymailServerError } from './errors/PaymailServerError'\nimport { Http } from './http'\nimport PureCache from 'pure-cache'\n\nclass EndpointResolver {\n  constructor (dns = null, fetch, defaultCacheTTL = 0) {\n    this.dnsClient = new DnsClient(dns, new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' }))\n\n    this.http = new Http(fetch)\n    this.defaultCacheTTL = defaultCacheTTL\n    if (defaultCacheTTL) {\n      this.cache = new PureCache({\n        expiryCheckInterval: 10000\n      })\n      if (this.cache.cacheExpirer.timer.unref) {\n        this.cache.cacheExpirer.timer.unref()\n      }\n    }\n  }\n\n  static create (dnsClient, fetch) {\n    const instance = new EndpointResolver(null, fetch)\n    instance.dnsClient = dnsClient\n    return instance\n  }\n\n  async getIdentityUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.pki)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const identityUrl = apiDescriptor.capabilities.pki\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return identityUrl\n  }\n\n  async getAddressUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.paymentDestination)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const addressUrl = apiDescriptor.capabilities.paymentDestination\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return addressUrl\n  }\n\n  async getVerifyUrlFor (aPaymail, aPubkey) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.verifyPublicKeyOwner)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.verifyPublicKeyOwner]\n      .replace('{alias}', alias).replace('{domain.tld}', domain).replace('{pubkey}', aPubkey)\n    return url\n  }\n\n  async getPublicProfileUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.publicProfile)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.publicProfile]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getSendTxUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.receiveTransaction)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.receiveTransaction]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getP2pPaymentDestinationUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.p2pPaymentDestination)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.p2pPaymentDestination]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getP2pPaymentDestinationWithTokensSupportUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.p2pPaymentDestinationWithTokensSupport)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.p2pPaymentDestinationWithTokensSupport]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getSfpBuildActionUrlFor (aPaymail) {\n    const [, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.sfpBuildAction)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.sfpBuildAction]\n    return url\n  }\n\n  async getSfpAuthoriseActionUrlFor (aPaymail) {\n    const [, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.sfpAuthoriseAction)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.sfpAuthoriseAction]\n    return url\n  }\n\n  async getAssetInformationUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.assetInformation)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.assetInformation]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async domainHasCapability (aDomain, capability) {\n    const apiDescriptor = await this.getApiDescriptionFor(aDomain)\n    return apiDescriptor.capabilities && !!apiDescriptor.capabilities[capability]\n  }\n\n  async getApiDescriptionFor (aDomain) {\n    let apiDescriptor = this.cache && this.cache.get(aDomain)\n    if (apiDescriptor) {\n      return apiDescriptor.value\n    }\n    const { domain, port } = await this.getWellKnownBaseUrl(aDomain)\n    apiDescriptor = await this.fetchApiDescriptor(domain, port)\n    this.cache && this.cache.put(aDomain, apiDescriptor, this.defaultCacheTTL)\n    return apiDescriptor\n  }\n\n  async fetchApiDescriptor (domain, port) {\n    const protocol = (domain === 'localhost' || domain === 'localhost.') ? 'http' : 'https'\n    const requestPort = port.toString() === '443' ? '' : `:${port}`\n    const requestDomain = /^(.*?)\\.?$/.exec(domain)[1] // Get value from capture group\n    if (!requestDomain) {\n      throw new Error(`Invalid domain: ${domain}`)\n    }\n    try {\n      const wellKnown = await this.http.get(`${protocol}://${requestDomain}${requestPort}/.well-known/bsvalias`)\n      const apiDescriptor = await wellKnown.json()\n      return apiDescriptor\n    } catch (err) {\n      if (err.message.includes('invalid json response') || err.message.includes('Unexpected token')) {\n        throw new PaymailServerError(`Paymail server at ${domain} returned an invalid capabilities description`)\n      }\n      if (err.message.includes('getaddrinfo ENOTFOUND')) {\n        throw new PaymailServerError(`Couldn't find domain ${domain}`)\n      }\n      if (err.message.includes('failed')) {\n        throw new PaymailServerError(`Couldn't connect to domain ${domain}`)\n      }\n      throw err\n    }\n  }\n\n  async getWellKnownBaseUrl (aDomain) {\n    return this.dnsClient.checkSrv(aDomain)\n  }\n\n  async ensureCapabilityFor (aDomain, aCapability) {\n    if (!await this.domainHasCapability(aDomain, aCapability)) {\n      throw new Error(`Unknown capability \"${aCapability}\" for \"${aDomain}\"`)\n    }\n  }\n}\n\nexport { EndpointResolver }\n","class VerifiableMessage {\n  constructor (parts, bsv = null) {\n    if (bsv === null) {\n      bsv = require('bsv')\n    }\n    this.bsv = bsv\n    this.concatenated = Buffer.from(parts.join(''))\n  }\n\n  static forBasicAddressResolution ({\n    senderHandle,\n    amount,\n    dt,\n    purpose\n  }) {\n    if (dt.toISOString) {\n      dt = dt.toISOString()\n    }\n\n    return new VerifiableMessage([\n      senderHandle,\n      amount || '0',\n      dt,\n      purpose\n    ])\n  }\n\n  sign (wifPrivKey) {\n    let privKey = this.bsv.PrivKey.fromWif(wifPrivKey)\n    let keyPair = this.bsv.KeyPair.fromPrivKey(privKey)\n    return this.bsv.Bsm.sign(this.concatenated, keyPair)\n  }\n\n  verify (keyAddress, signature) {\n    return this.bsv.Bsm.verify(this.concatenated, signature, this.bsv.Address.fromString(keyAddress))\n  }\n}\n\nexport { VerifiableMessage }\n","import { VerifiableMessage } from './VerifiableMessage'\n\nclass RequestBodyFactory {\n  constructor (clock) {\n    this.clock = clock\n  }\n  buildBodyToRequestAddress (senderInfo, privateKey = null) {\n    const {\n      senderHandle,\n      amount,\n      senderName,\n      purpose,\n      pubkey,\n      signature: providedSignature\n    } = senderInfo\n\n    if (!providedSignature && privateKey === null) {\n      throw new Error('Missing private key or signature')\n    }\n\n    let dt, signature\n    if (providedSignature) {\n      if (!senderInfo.dt) {\n        throw new Error('missing datetime for given signature')\n      }\n      dt = senderInfo.dt\n      signature = providedSignature\n    } else {\n      dt = this.clock.now()\n      signature = VerifiableMessage.forBasicAddressResolution({\n        senderHandle,\n        amount,\n        dt,\n        purpose\n      }).sign(privateKey)\n    }\n\n    return {\n      senderHandle,\n      senderName,\n      purpose,\n      dt,\n      amount: amount || null,\n      pubkey,\n      signature\n    }\n  }\n\n  buildBodySendTx (hexTransaction, reference, metadata) {\n    return { hex: hexTransaction, metadata, reference }\n  }\n\n  buildBodyP2pPaymentDestination (satoshis) {\n    return { satoshis }\n  }\n}\n\nexport { RequestBodyFactory }\n","import moment from 'moment'\n\nclass Clock {\n  now () {\n    return moment()\n  }\n}\n\nexport { Clock }\n","class PaymailNotFound extends Error {\n  constructor (message, paymail) {\n    super(message)\n    this.paymail = paymail\n  }\n}\n\nexport { PaymailNotFound }\n","import { DnsOverHttps } from './dns-over-https'\n\nclass BrowserDns {\n  constructor (fetch) {\n    this.doh = new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' })\n  }\n\n  async resolveSrv (aDomain, aCallback) {\n    try {\n      const response = await this.doh.resolveSrv(aDomain)\n      if (response.Status === 0 && response.Answer) {\n        const data = response.Answer.map(record => {\n          const [ priority, weight, port, name ] = record.data.split(' ')\n          return {\n            priority,\n            weight,\n            port,\n            name,\n            isSecure: response.AD\n          }\n        })\n        aCallback(null, data)\n      } else if (response.Status === 3 || !response.Answer) {\n        aCallback({ code: 'ENODATA' })\n      } else {\n        aCallback(new Error('error during dns query'))\n      }\n    } catch (e) {\n      aCallback(e)\n    }\n  }\n}\n\nexport { BrowserDns }\n","class ProtocolNotSupported extends Error {\n  constructor (message, protocol) {\n    super(message)\n    this.protocol = protocol\n  }\n}\n\nexport { ProtocolNotSupported }\n","class AssetNotAccepted extends Error {\n  constructor (message, asset) {\n    super(message)\n    this.asset = asset\n  }\n}\n\nexport { AssetNotAccepted }\n","import { EndpointResolver } from \"./EndpointResolver\";\nimport { VerifiableMessage } from \"./VerifiableMessage\";\nimport { RequestBodyFactory } from \"./RequestBodyFactory\";\nimport { Clock } from \"./Clock\";\nimport { PaymailNotFound } from \"./errors/PaymailNotFound\";\nimport { CapabilityCodes } from \"./constants\";\nimport fetch from \"node-fetch\";\nimport { BrowserDns } from \"./BrowserDns\";\nimport { Http } from \"./http\";\nimport HttpStatus from \"http-status-codes\";\nimport { ProtocolNotSupported } from \"./errors/ProtocolNotSupported\";\nimport { AssetNotAccepted } from \"./errors/AssetNotAccepted\";\nimport { PaymailServerError } from \"./errors/PaymailServerError\";\n\nclass PaymailClient {\n  constructor(dns = null, fetch2 = null, clock = null, bsv = null) {\n    let defaultCacheTTL = 3600 * 1000;\n\n    if (fetch2 === null) {\n      fetch2 = fetch;\n    }\n    if (dns === null) {\n      dns = new BrowserDns(fetch2);\n      defaultCacheTTL = 0;\n    }\n    if (bsv === null) {\n      bsv = require(\"bsv\");\n    }\n    this.bsv = bsv;\n    this.resolver = new EndpointResolver(dns, fetch2, defaultCacheTTL);\n    this.http = new Http(fetch2);\n    this.requestBodyFactory = new RequestBodyFactory(\n      clock !== null ? clock : new Clock()\n    );\n    this.VerifiableMessage = VerifiableMessage;\n  }\n\n  /**\n   * Uses pki flow to query for an identity key for a given paymail address.\n   *\n   * @param {String} paymail - a paymail address\n   */\n  async getPublicKey(paymail) {\n    const identityUrl = await this.resolver.getIdentityUrlFor(paymail);\n    const response = await this.http.get(identityUrl);\n    const { pubkey } = await response.json();\n    return pubkey;\n  }\n\n  /**\n   * Uses `Basic Address Resolution` flow to query for a payment for output for the\n   * given paymail address.\n   *\n   * @param {String} aPaymail - a paymail address\n   * @param {Object} senderInfo - Object containing sender info\n   * @param {String} senderInfo.senderHandle - Sender paymail address\n   * @param {String} senderInfo.amount - Optional. Required amount.\n   * @param {String} senderInfo.senderName - Optional. Sender name.\n   * @param {String} senderInfo.purpose - Optional. Purpose of the payment.\n   * @param {String} senderInfo.pubkey - Optional. Public key used to sign the message.\n   * @param {String} senderInfo.signature - Optional. Valid signature according to paymail specification.\n   * @param {String} privateKey - Optional. private key to sign the request.\n   */\n  async getOutputFor(aPaymail, senderInfo, privateKey = null) {\n    const addressUrl = await this.resolver.getAddressUrlFor(aPaymail);\n    const body = this.requestBodyFactory.buildBodyToRequestAddress(\n      senderInfo,\n      privateKey\n    );\n    const response = await this.http.postJson(addressUrl, body);\n\n    if (response.status === HttpStatus.NOT_FOUND) {\n      throw new PaymailNotFound(`Paymail not found: ${aPaymail}`, aPaymail);\n    } else if (!response.ok) {\n      throw new Error(`Server failed with: ${await response.text()}`);\n    }\n    const { output } = await response.json();\n    return output;\n  }\n\n  /**\n   * Verify if the given public address belongs to the given\n   * paymail address.\n   *\n   * @param {String} pubkey - Public key to check.\n   * @param {String} paymail - a paymail address\n   */\n  async verifyPubkeyOwner(pubkey, paymail) {\n    const url = await this.resolver.getVerifyUrlFor(paymail, pubkey);\n    const response = await this.http.get(url);\n    const body = await response.json();\n    const { match } = body;\n    return match;\n  }\n\n  /**\n   * Verifies if a given signature is valid for a given message. It uses\n   * different strategies depending on the capabilities of the server\n   * and the parameters Given. The priority order is.\n   * - If paymail is not provided, then normal signature verification is performed.\n   * - Use provided key (and check that belongs to given paymail address).\n   * - Get a new pubkey for given paymail address using pki.\n   * - If there is no way to intereact with the owner of the domain to verify the public key it returns false.\n   *\n   * @param {Message} message - Message to verify\n   * @param {String} signature - Signature\n   * @param {String} paymail - Signature owner paymail\n   * @param {String} pubkey - Optional. Public key that validates the signature.\n   */\n  async isValidSignature(message, signature, paymail = null, pubkey = null) {\n    if (paymail == null && pubkey === null) {\n      throw new Error(\"Must specify either paymail or pubkey\");\n    }\n    let senderPubKey;\n    if (paymail) {\n      if (\n        pubkey &&\n        (await this.resolver.domainHasCapability(\n          paymail.split(\"@\")[1],\n          CapabilityCodes.verifyPublicKeyOwner\n        ))\n      ) {\n        if (await this.verifyPubkeyOwner(pubkey, paymail)) {\n          senderPubKey = this.bsv.PubKey.fromString(pubkey);\n        } else {\n          return false;\n        }\n      } else {\n        const hasPki = await this.resolver.domainHasCapability(\n          paymail.split(\"@\")[1],\n          CapabilityCodes.pki\n        );\n        if (hasPki) {\n          const identityKey = await this.getPublicKey(paymail);\n          senderPubKey = this.bsv.PubKey.fromString(identityKey);\n        } else {\n          return false;\n        }\n      }\n    }\n\n    const senderKeyAddress = this.bsv.Address.fromPubKey(\n      senderPubKey || pubkey\n    );\n    try {\n      const verified = message.verify(senderKeyAddress.toString(), signature);\n      return verified;\n    } catch (err) {\n      // console.log(err)\n      return false;\n    }\n  }\n\n  /**\n   * Gets the public profile information using the \"Public Profile\" protocol.\n   *\n   * @param {String} paymail - a paymail address\n   * @param {String} s - the preferred size of the image\n   */\n  async getPublicProfile(paymail) {\n    let publicProfileUrl = await this.resolver.getPublicProfileUrlFor(paymail);\n    const response = await this.http.get(publicProfileUrl);\n    if (!response.ok) {\n      const body = await response.json();\n      throw new Error(`Server failed with: ${JSON.stringify(body)}`);\n    }\n    const { avatar, name } = await response.json();\n    return { avatar, name };\n  }\n\n  async sendRawTx(targetPaymail, hexTransaction, reference, metadata = {}) {\n    if (!hexTransaction) {\n      throw new Error(\"transaction hex cannot be empty\");\n    }\n    let receiveTxUrl = await this.resolver.getSendTxUrlFor(targetPaymail);\n    const response = await this.http.postJson(\n      receiveTxUrl,\n      this.requestBodyFactory.buildBodySendTx(\n        hexTransaction,\n        reference,\n        metadata\n      )\n    );\n    if (!response.ok) {\n      const body = await response.text();\n      throw new Error(`Server failed with: ${body}`);\n    }\n    return response.json();\n  }\n\n  async getP2pPaymentDestination(targetPaymail, satoshis) {\n    if (!satoshis) {\n      throw new Error(\"Amount in satohis needs to be specified\");\n    }\n    let paymentDestinationUrl =\n      await this.resolver.getP2pPaymentDestinationUrlFor(targetPaymail);\n    const response = await this.http.postJson(\n      paymentDestinationUrl,\n      this.requestBodyFactory.buildBodyP2pPaymentDestination(satoshis)\n    );\n    if (response.status === HttpStatus.NOT_FOUND) {\n      throw new PaymailNotFound(\n        `Paymail ${targetPaymail} not found`,\n        targetPaymail\n      );\n    }\n    if (!response.ok) {\n      throw new PaymailServerError(\n        `Paymail server for ${targetPaymail} returned an invalid response`\n      );\n    }\n\n    const body = await response.json();\n    if (!body.outputs) {\n      throw new PaymailServerError(\n        \"Server answered with a wrong format. Missing outputs\"\n      );\n    }\n\n    return body;\n  }\n\n  async getP2pPaymentDestinationWithTokensSupport(\n    targetPaymail,\n    amount,\n    asset,\n    protocol\n  ) {\n    const UNAVAILABLE_FOR_LEGAL_REASONS = 451;\n    if (!amount) {\n      throw new Error(\"Amount needs to be specified\");\n    }\n    let paymentDestinationUrl =\n      await this.resolver.getP2pPaymentDestinationWithTokensSupportUrlFor(\n        targetPaymail\n      );\n    const response = await this.http.postJson(paymentDestinationUrl, {\n      amount,\n      asset,\n      protocol,\n    });\n    if (response.status === HttpStatus.NOT_ACCEPTABLE) {\n      throw new ProtocolNotSupported(\n        `Protocol ${protocol} is not supported by paymail ${targetPaymail}`,\n        protocol\n      );\n    }\n    if (response.status === HttpStatus.NOT_FOUND) {\n      throw new PaymailNotFound(\n        `Paymail ${targetPaymail} not found`,\n        targetPaymail\n      );\n    }\n    if (response.status === UNAVAILABLE_FOR_LEGAL_REASONS) {\n      throw new AssetNotAccepted(\n        `Paymail ${targetPaymail} cannot accept asset ${asset}`\n      );\n    }\n    if (!response.ok) {\n      throw new PaymailServerError(\n        `Paymail server for ${targetPaymail} returned an invalid response`\n      );\n    }\n\n    const body = await response.json();\n    if (!body.outputs) {\n      throw new PaymailServerError(\n        \"Server answered with a wrong format. Missing outputs\"\n      );\n    }\n\n    return body;\n  }\n\n  async sendSfpBuildAction(targetAssetPaymail, params) {\n    const buildActionUrl = await this.resolver.getSfpBuildActionUrlFor(\n      targetAssetPaymail\n    );\n    const response = await this.http.postJson(buildActionUrl, params);\n\n    if (!response.ok) {\n      const body = await response.json();\n      throw new PaymailServerError(body.message);\n    }\n\n    return response.json();\n  }\n\n  async sendSfpAuthoriseAction(targetAssetPaymail, params) {\n    let authoriseActionUrl = await this.resolver.getSfpAuthoriseActionUrlFor(\n      targetAssetPaymail\n    );\n    const response = await this.http.postJson(authoriseActionUrl, params);\n\n    if (!response.ok) {\n      const body = await response.json();\n      throw new Error(body.message);\n    }\n\n    return response.json();\n  }\n\n  async getAssetInformation(assetTargetPaymail) {\n    let assetInformationUrl = await this.resolver.getAssetInformationUrlFor(\n      assetTargetPaymail\n    );\n    const response = await this.http.get(assetInformationUrl);\n\n    if (response.status === HttpStatus.NOT_FOUND) {\n      throw new Error(`Asset ${assetTargetPaymail} was not found`);\n    }\n    if (!response.ok) {\n      const body = await response.text();\n      throw new Error(`Server failed with: ${body}`);\n    }\n\n    return response.json();\n  }\n}\n\nexport { PaymailClient };\n"],"names":["CapabilityCodes","pki","paymentDestination","requestSenderValidation","brfc","verifyPublicKeyOwner","publicProfile","receiveTransaction","p2pPaymentDestination","assetInformation","p2pPaymentDestinationWithTokensSupport","sfpBuildAction","sfpAuthoriseAction","PaymailServerError","Error","DnsClient","constructor","dns","doh","checkSrv","aDomain","Promise","resolve","reject","resolveSrv","err","result","code","domain","port","isSecure","name","domainFromDns","checkDomainIsSecure","then","validateDnssec","console","error","srvResponseDomain","originalDomain","domainsAreEqual","responseIsWwwSubdomain","isHandcashDomain","isHandcashInternalDomain","isMoneyButtonDomain","dnsResponse","queryBsvaliasDomain","Status","Answer","data","split","responseDomain","AD","domain1","domain2","replace","DnsOverHttps","fetch","config","response","baseUrl","body","json","Http","get","url","_basicRequest","postJson","method","headers","JSON","stringify","options","controller","AbortController","timer","setTimeout","abort","credentials","signal","clearTimeout","EndpointResolver","defaultCacheTTL","dnsClient","http","cache","PureCache","expiryCheckInterval","cacheExpirer","unref","create","instance","getIdentityUrlFor","aPaymail","alias","ensureCapabilityFor","apiDescriptor","getApiDescriptionFor","identityUrl","capabilities","getAddressUrlFor","addressUrl","getVerifyUrlFor","aPubkey","getPublicProfileUrlFor","getSendTxUrlFor","getP2pPaymentDestinationUrlFor","getP2pPaymentDestinationWithTokensSupportUrlFor","getSfpBuildActionUrlFor","getSfpAuthoriseActionUrlFor","getAssetInformationUrlFor","domainHasCapability","capability","value","getWellKnownBaseUrl","fetchApiDescriptor","put","protocol","requestPort","toString","requestDomain","exec","wellKnown","message","includes","aCapability","VerifiableMessage","parts","bsv","require","concatenated","Buffer","from","join","forBasicAddressResolution","senderHandle","amount","dt","purpose","toISOString","sign","wifPrivKey","privKey","PrivKey","fromWif","keyPair","KeyPair","fromPrivKey","Bsm","verify","keyAddress","signature","Address","fromString","RequestBodyFactory","clock","buildBodyToRequestAddress","senderInfo","privateKey","senderName","pubkey","providedSignature","now","buildBodySendTx","hexTransaction","reference","metadata","hex","buildBodyP2pPaymentDestination","satoshis","Clock","moment","PaymailNotFound","paymail","BrowserDns","aCallback","map","record","priority","weight","e","ProtocolNotSupported","AssetNotAccepted","asset","PaymailClient","fetch2","resolver","requestBodyFactory","getPublicKey","getOutputFor","status","HttpStatus","NOT_FOUND","ok","text","output","verifyPubkeyOwner","match","isValidSignature","senderPubKey","PubKey","hasPki","identityKey","senderKeyAddress","fromPubKey","verified","getPublicProfile","publicProfileUrl","avatar","sendRawTx","targetPaymail","receiveTxUrl","getP2pPaymentDestination","paymentDestinationUrl","outputs","getP2pPaymentDestinationWithTokensSupport","UNAVAILABLE_FOR_LEGAL_REASONS","NOT_ACCEPTABLE","sendSfpBuildAction","targetAssetPaymail","params","buildActionUrl","sendSfpAuthoriseAction","authoriseActionUrl","getAssetInformation","assetTargetPaymail","assetInformationUrl"],"mappings":";;;;;;;MAEaA,eAAe,GAAG;EAC7BC,GAAG,EAAE,KADwB;EAE7BC,kBAAkB,EAAE,oBAFS;EAG7BC,uBAAuB,EAAEC,IAAI,CAC3B,gDAD2B,EAE3B,CAAC,eAAD,CAF2B,EAG3B,EAH2B,CAHA;EAQ7BC,oBAAoB,EAAED,IAAI,CACxB,sDADwB,EAExB,EAFwB,EAGxB,EAHwB,CARG;EAa7BE,aAAa,EAAEF,IAAI,CACjB,gCADiB,EAEjB,CAAC,gCAAD,CAFiB,EAGjB,GAHiB,CAbU;EAkB7BG,kBAAkB,EAAEH,IAAI,CACtB,sBADsB,EAEtB,CAAC,8BAAD,EAAiC,gCAAjC,EAAmE,0BAAnE,EAA+F,iBAA/F,CAFsB,EAGtB,KAHsB,CAlBK;EAuB7BI,qBAAqB,EAAEJ,IAAI,CACzB,gEADyB,EAEzB,CAAC,8BAAD,EAAiC,gCAAjC,EAAmE,0BAAnE,EAA+F,iBAA/F,CAFyB,EAGzB,KAHyB,CAvBE;EA4B7BK,gBAAgB,EAAEL,IAAI,CACpB,mBADoB,EAEpB,CAAC,SAAD,CAFoB,EAGpB,GAHoB,CA5BO;EAiC7BM,sCAAsC,EAAEN,IAAI,CAC1C,6CAD0C,EAE1C,CAAC,SAAD,CAF0C,EAG1C,GAH0C,CAjCf;EAsC7BO,cAAc,EAAEP,IAAI,CAClB,iDADkB,EAElB,CAAC,SAAD,CAFkB,EAGlB,GAHkB,CAtCS;EA2C7BQ,kBAAkB,EAAER,IAAI,CACtB,qDADsB,EAEtB,CAAC,SAAD,CAFsB,EAGtB,GAHsB;AA3CK;;ACF/B,MAAMS,kBAAN,SAAiCC,KAAjC,CAAuC;;ACAvC;AAEA;AAEA,MAAMC,SAAN,CAAgB;EACdC,WAAW,CAAEC,GAAF,EAAOC,GAAP,EAAY;IACrB,KAAKD,GAAL,GAAWA,GAAX;IACA,KAAKC,GAAL,GAAWA,GAAX;;;EAGY,MAARC,QAAQ,CAAEC,OAAF,EAAW;IACvB,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACtC,KAAKN,GAAL,CAASO,UAAT,CAAqB,kBAAiBJ,OAAQ,EAA9C,EAAiD,OAAOK,GAAP,EAAYC,MAAZ,KAAuB;QACtE,IAAI;UACF,IAAID,GAAG,KAAKA,GAAG,CAACE,IAAJ,KAAa,SAAb,IAA0BF,GAAG,CAACE,IAAJ,KAAa,WAA5C,CAAP,EAAiE;YAC/D,OAAOL,OAAO,CAAC;cACbM,MAAM,EAAER,OADK;cAEbS,IAAI,EAAE,GAFO;cAGbC,QAAQ,EAAE;aAHE,CAAd;;;UAMF,IAAIL,GAAJ,EAAS;YACP,OAAOF,MAAM,CAACE,GAAD,CAAb;;;UAGF,MAAM;YAAEM,IAAI,EAAEC,aAAR;YAAuBH,IAAvB;YAA6BC;cAAaJ,MAAM,CAAC,CAAD,CAAtD;UACAJ,OAAO,CAAC;YACNM,MAAM,EAAEI,aADF;YAENH,IAFM;YAGNC,QAAQ,EAAE,KAAKG,mBAAL,CAAyBD,aAAzB,EAAwCZ,OAAxC,KAAoDU;WAHzD,CAAP;SAbF,CAkBE,OAAOL,GAAP,EAAY;UACZ,OAAOF,MAAM,CAACE,GAAD,CAAb;;OApBJ;KADK,EAwBJS,IAxBI,CAwBCR,MAAM,IAAI;MAChB,IAAIA,MAAM,CAACI,QAAX,EAAqB;QACnB,OAAOJ,MAAP;OADF,MAEO;QACL,OAAO,KAAKS,cAAL,CAAoBf,OAApB,CAAP;;KA5BG,EA8BHK,GAAD,IAAS;MACVW,OAAO,CAACC,KAAR,CAAcZ,GAAd;MACA,OAAOA,GAAP;KAhCK,CAAP;;;EAoCFQ,mBAAmB,CAAEK,iBAAF,EAAqBC,cAArB,EAAqC;IACtD,IAAI,KAAKC,eAAL,CAAqBF,iBAArB,EAAwCC,cAAxC,CAAJ,EAA6D;MAC3D,OAAO,IAAP;KADF,MAEO,IAAI,KAAKE,sBAAL,CAA4BH,iBAA5B,EAA+CC,cAA/C,CAAJ,EAAoE;MACzE,OAAO,IAAP;KADK,MAEA,IAAI,KAAKG,gBAAL,CAAsBH,cAAtB,CAAJ,EAA2C;;MAChD,OAAO,KAAKC,eAAL,CAAqB,2CAArB,EAAkEF,iBAAlE,KAAwF,KAAKE,eAAL,CAAqB,yCAArB,EAAgEF,iBAAhE,CAA/F;KADK,MAEA,IAAI,KAAKK,wBAAL,CAA8BJ,cAA9B,CAAJ,EAAmD;MACxD,OAAO,KAAKC,eAAL,CAAqB,sCAArB,EAA6DF,iBAA7D,CAAP;KADK,MAEA,IAAI,KAAKE,eAAL,CAAqB,WAArB,EAAkCF,iBAAlC,CAAJ,EAA0D;MAC/D,OAAO,IAAP;KADK,MAEA,IAAI,KAAKM,mBAAL,CAAyBN,iBAAzB,CAAJ,EAAiD;MACtD,OAAO,IAAP;KADK,MAEA;MACL,OAAO,KAAP;;;;EAIJM,mBAAmB,CAAExB,OAAF,EAAW;IAC5B,OAAO,KAAKoB,eAAL,CAAqBpB,OAArB,EAA8B,iBAA9B,KAAoD,KAAKoB,eAAL,CAAqBpB,OAArB,EAA8B,qBAA9B,CAA3D;;;EAGFqB,sBAAsB,CAAEH,iBAAF,EAAqBC,cAArB,EAAqC;IACzD,OAAO,KAAKC,eAAL,CAAqBF,iBAArB,EAAyC,OAAMC,cAAe,EAA9D,CAAP;;;EAGFG,gBAAgB,CAAEtB,OAAF,EAAW;IACzB,OAAO,KAAKoB,eAAL,CAAqB,aAArB,EAAoCpB,OAApC,CAAP;;;EAGFuB,wBAAwB,CAAEvB,OAAF,EAAW;IACjC,OAAO,KAAKoB,eAAL,CAAqB,sBAArB,EAA6CpB,OAA7C,CAAP;;;EAGkB,MAAde,cAAc,CAAEf,OAAF,EAAW;IAC7B,MAAMyB,WAAW,GAAG,MAAM,KAAK3B,GAAL,CAAS4B,mBAAT,CAA6B1B,OAA7B,CAA1B;;IACA,IAAIyB,WAAW,CAACE,MAAZ,KAAuB,CAAvB,IAA4B,CAACF,WAAW,CAACG,MAA7C,EAAqD;MACnD,MAAM,IAAInC,kBAAJ,CAAwB,GAAEO,OAAQ,+CAAlC,CAAN;;;IAEF,MAAM6B,IAAI,GAAGJ,WAAW,CAACG,MAAZ,CAAmB,CAAnB,EAAsBC,IAAtB,CAA2BC,KAA3B,CAAiC,GAAjC,CAAb;IACA,MAAMrB,IAAI,GAAGoB,IAAI,CAAC,CAAD,CAAjB;IACA,MAAME,cAAc,GAAGF,IAAI,CAAC,CAAD,CAA3B;;IACA,IAAI,CAACJ,WAAW,CAACO,EAAb,IAAmB,CAAC,KAAKZ,eAAL,CAAqBpB,OAArB,EAA8B+B,cAA9B,CAAxB,EAAuE;MACrE,MAAM,IAAItC,kBAAJ,CAAwB,GAAEO,OAAQ,+CAAlC,CAAN;;;IAEF,OAAO;MACLS,IADK;MAELD,MAAM,EAAEuB,cAFH;MAGLrB,QAAQ,EAAEe,WAAW,CAACO;KAHxB;;;EAOFZ,eAAe,CAAEa,OAAF,EAAWC,OAAX,EAAoB;IACjC,OAAOD,OAAO,CAACE,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,MAA+BD,OAAO,CAACC,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAtC;;;AAhGY;;ACJhB,MAAMC,YAAN,CAAmB;EACjBxC,WAAW,CAAEyC,KAAF,EAASC,MAAT,EAAiB;IAC1B,KAAKD,KAAL,GAAaA,KAAb;IACA,KAAKC,MAAL,GAAcA,MAAd;;;EAGc,MAAVlC,UAAU,CAAEJ,OAAF,EAAW;IACzB,MAAMuC,QAAQ,GAAG,MAAM,KAAKF,KAAL,CAAY,GAAE,KAAKC,MAAL,CAAYE,OAAQ,SAAQxC,OAAQ,gBAAlD,CAAvB;IACA,MAAMyC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;IACA,OAAOD,IAAP;;;EAGuB,MAAnBf,mBAAmB,CAAE1B,OAAF,EAAW;IAClC,OAAO,KAAKI,UAAL,CAAiB,kBAAiBJ,OAAQ,EAA1C,CAAP;;;AAbe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEnB,MAAM2C,IAAN,CAAW;EACT/C,WAAW,CAAEyC,KAAF,EAAS;IAClB,KAAKA,KAAL,GAAaA,KAAb;;;EAGO,MAAHO,GAAG,CAAEC,GAAF,EAAO;IACd,OAAO,KAAKC,aAAL,CAAmBD,GAAnB,CAAP;;;EAGY,MAARE,QAAQ,CAAEF,GAAF,EAAOJ,IAAP,EAAa;IACzB,OAAO,KAAKK,aAAL,CAAmBD,GAAnB,EAAwB;MAC7BG,MAAM,EAAE,MADqB;MAE7BC,OAAO,EAAE;QACP,gBAAgB;OAHW;MAK7BR,IAAI,EAAES,IAAI,CAACC,SAAL,CAAeV,IAAf;KALD,CAAP;;;EASiB,MAAbK,aAAa,CAAED,GAAF,EAAOO,OAAO,GAAG,EAAjB,EAAqB;IACtC,IAAIC,UAAU,GAAG,IAAIC,eAAJ,EAAjB;IACA,MAAMC,KAAK,GAAGC,UAAU,CAAC,MAAMH,UAAU,CAACI,KAAX,EAAP,EAA2B,KAA3B,CAAxB;IACA,OAAO,KAAKpB,KAAL,CAAWQ,GAAX,qBACFO,OADE;MAELM,WAAW,EAAE,MAFR;MAGLC,MAAM,EAAEN,UAAU,CAACM;QAClB7C,IAJI,CAICR,MAAM,IAAI;MAChBsD,YAAY,CAACL,KAAD,CAAZ;MACA,OAAOjD,MAAP;KANK,CAAP;;;AAtBO;;ACKX,MAAMuD,gBAAN,CAAuB;EACrBjE,WAAW,CAAEC,GAAG,GAAG,IAAR,EAAcwC,KAAd,EAAqByB,eAAe,GAAG,CAAvC,EAA0C;IACnD,KAAKC,SAAL,GAAiB,IAAIpE,SAAJ,CAAcE,GAAd,EAAmB,IAAIuC,YAAJ,CAAiBC,KAAjB,EAAwB;MAAEG,OAAO,EAAE;KAAnC,CAAnB,CAAjB;IAEA,KAAKwB,IAAL,GAAY,IAAIrB,IAAJ,CAASN,KAAT,CAAZ;IACA,KAAKyB,eAAL,GAAuBA,eAAvB;;IACA,IAAIA,eAAJ,EAAqB;MACnB,KAAKG,KAAL,GAAa,IAAIC,SAAJ,CAAc;QACzBC,mBAAmB,EAAE;OADV,CAAb;;MAGA,IAAI,KAAKF,KAAL,CAAWG,YAAX,CAAwBb,KAAxB,CAA8Bc,KAAlC,EAAyC;QACvC,KAAKJ,KAAL,CAAWG,YAAX,CAAwBb,KAAxB,CAA8Bc,KAA9B;;;;;EAKO,OAANC,MAAM,CAAEP,SAAF,EAAa1B,KAAb,EAAoB;IAC/B,MAAMkC,QAAQ,GAAG,IAAIV,gBAAJ,CAAqB,IAArB,EAA2BxB,KAA3B,CAAjB;IACAkC,QAAQ,CAACR,SAAT,GAAqBA,SAArB;IACA,OAAOQ,QAAP;;;EAGqB,MAAjBC,iBAAiB,CAAEC,QAAF,EAAY;IACjC,MAAM,CAACC,KAAD,EAAQlE,MAAR,IAAkBiE,QAAQ,CAAC3C,KAAT,CAAe,GAAf,CAAxB;IACA,MAAM,KAAK6C,mBAAL,CAAyBnE,MAAzB,EAAiC5B,eAAe,CAACC,GAAjD,CAAN;IACA,MAAM+F,aAAa,GAAG,MAAM,KAAKC,oBAAL,CAA0BrE,MAA1B,CAA5B;IACA,MAAMsE,WAAW,GAAGF,aAAa,CAACG,YAAd,CAA2BlG,GAA3B,CACjBsD,OADiB,CACT,SADS,EACEuC,KADF,EACSvC,OADT,CACiB,cADjB,EACiC3B,MADjC,CAApB;IAEA,OAAOsE,WAAP;;;EAGoB,MAAhBE,gBAAgB,CAAEP,QAAF,EAAY;IAChC,MAAM,CAACC,KAAD,EAAQlE,MAAR,IAAkBiE,QAAQ,CAAC3C,KAAT,CAAe,GAAf,CAAxB;IACA,MAAM,KAAK6C,mBAAL,CAAyBnE,MAAzB,EAAiC5B,eAAe,CAACE,kBAAjD,CAAN;IACA,MAAM8F,aAAa,GAAG,MAAM,KAAKC,oBAAL,CAA0BrE,MAA1B,CAA5B;IACA,MAAMyE,UAAU,GAAGL,aAAa,CAACG,YAAd,CAA2BjG,kBAA3B,CAChBqD,OADgB,CACR,SADQ,EACGuC,KADH,EACUvC,OADV,CACkB,cADlB,EACkC3B,MADlC,CAAnB;IAEA,OAAOyE,UAAP;;;EAGmB,MAAfC,eAAe,CAAET,QAAF,EAAYU,OAAZ,EAAqB;IACxC,MAAM,CAACT,KAAD,EAAQlE,MAAR,IAAkBiE,QAAQ,CAAC3C,KAAT,CAAe,GAAf,CAAxB;IACA,MAAM,KAAK6C,mBAAL,CAAyBnE,MAAzB,EAAiC5B,eAAe,CAACK,oBAAjD,CAAN;IACA,MAAM2F,aAAa,GAAG,MAAM,KAAKC,oBAAL,CAA0BrE,MAA1B,CAA5B;IACA,MAAMqC,GAAG,GAAG+B,aAAa,CAACG,YAAd,CAA2BnG,eAAe,CAACK,oBAA3C,EACTkD,OADS,CACD,SADC,EACUuC,KADV,EACiBvC,OADjB,CACyB,cADzB,EACyC3B,MADzC,EACiD2B,OADjD,CACyD,UADzD,EACqEgD,OADrE,CAAZ;IAEA,OAAOtC,GAAP;;;EAG0B,MAAtBuC,sBAAsB,CAAEX,QAAF,EAAY;IACtC,MAAM,CAACC,KAAD,EAAQlE,MAAR,IAAkBiE,QAAQ,CAAC3C,KAAT,CAAe,GAAf,CAAxB;IACA,MAAM,KAAK6C,mBAAL,CAAyBnE,MAAzB,EAAiC5B,eAAe,CAACM,aAAjD,CAAN;IACA,MAAM0F,aAAa,GAAG,MAAM,KAAKC,oBAAL,CAA0BrE,MAA1B,CAA5B;IACA,MAAMqC,GAAG,GAAG+B,aAAa,CAACG,YAAd,CAA2BnG,eAAe,CAACM,aAA3C,EACTiD,OADS,CACD,SADC,EACUuC,KADV,EACiBvC,OADjB,CACyB,cADzB,EACyC3B,MADzC,CAAZ;IAEA,OAAOqC,GAAP;;;EAGmB,MAAfwC,eAAe,CAAEZ,QAAF,EAAY;IAC/B,MAAM,CAACC,KAAD,EAAQlE,MAAR,IAAkBiE,QAAQ,CAAC3C,KAAT,CAAe,GAAf,CAAxB;IACA,MAAM,KAAK6C,mBAAL,CAAyBnE,MAAzB,EAAiC5B,eAAe,CAACO,kBAAjD,CAAN;IACA,MAAMyF,aAAa,GAAG,MAAM,KAAKC,oBAAL,CAA0BrE,MAA1B,CAA5B;IACA,MAAMqC,GAAG,GAAG+B,aAAa,CAACG,YAAd,CAA2BnG,eAAe,CAACO,kBAA3C,EACTgD,OADS,CACD,SADC,EACUuC,KADV,EACiBvC,OADjB,CACyB,cADzB,EACyC3B,MADzC,CAAZ;IAEA,OAAOqC,GAAP;;;EAGkC,MAA9ByC,8BAA8B,CAAEb,QAAF,EAAY;IAC9C,MAAM,CAACC,KAAD,EAAQlE,MAAR,IAAkBiE,QAAQ,CAAC3C,KAAT,CAAe,GAAf,CAAxB;IACA,MAAM,KAAK6C,mBAAL,CAAyBnE,MAAzB,EAAiC5B,eAAe,CAACQ,qBAAjD,CAAN;IACA,MAAMwF,aAAa,GAAG,MAAM,KAAKC,oBAAL,CAA0BrE,MAA1B,CAA5B;IACA,MAAMqC,GAAG,GAAG+B,aAAa,CAACG,YAAd,CAA2BnG,eAAe,CAACQ,qBAA3C,EACT+C,OADS,CACD,SADC,EACUuC,KADV,EACiBvC,OADjB,CACyB,cADzB,EACyC3B,MADzC,CAAZ;IAEA,OAAOqC,GAAP;;;EAGmD,MAA/C0C,+CAA+C,CAAEd,QAAF,EAAY;IAC/D,MAAM,CAACC,KAAD,EAAQlE,MAAR,IAAkBiE,QAAQ,CAAC3C,KAAT,CAAe,GAAf,CAAxB;IACA,MAAM,KAAK6C,mBAAL,CAAyBnE,MAAzB,EAAiC5B,eAAe,CAACU,sCAAjD,CAAN;IACA,MAAMsF,aAAa,GAAG,MAAM,KAAKC,oBAAL,CAA0BrE,MAA1B,CAA5B;IACA,MAAMqC,GAAG,GAAG+B,aAAa,CAACG,YAAd,CAA2BnG,eAAe,CAACU,sCAA3C,EACT6C,OADS,CACD,SADC,EACUuC,KADV,EACiBvC,OADjB,CACyB,cADzB,EACyC3B,MADzC,CAAZ;IAEA,OAAOqC,GAAP;;;EAG2B,MAAvB2C,uBAAuB,CAAEf,QAAF,EAAY;IACvC,MAAM,GAAGjE,MAAH,IAAaiE,QAAQ,CAAC3C,KAAT,CAAe,GAAf,CAAnB;IACA,MAAM,KAAK6C,mBAAL,CAAyBnE,MAAzB,EAAiC5B,eAAe,CAACW,cAAjD,CAAN;IACA,MAAMqF,aAAa,GAAG,MAAM,KAAKC,oBAAL,CAA0BrE,MAA1B,CAA5B;IACA,MAAMqC,GAAG,GAAG+B,aAAa,CAACG,YAAd,CAA2BnG,eAAe,CAACW,cAA3C,CAAZ;IACA,OAAOsD,GAAP;;;EAG+B,MAA3B4C,2BAA2B,CAAEhB,QAAF,EAAY;IAC3C,MAAM,GAAGjE,MAAH,IAAaiE,QAAQ,CAAC3C,KAAT,CAAe,GAAf,CAAnB;IACA,MAAM,KAAK6C,mBAAL,CAAyBnE,MAAzB,EAAiC5B,eAAe,CAACY,kBAAjD,CAAN;IACA,MAAMoF,aAAa,GAAG,MAAM,KAAKC,oBAAL,CAA0BrE,MAA1B,CAA5B;IACA,MAAMqC,GAAG,GAAG+B,aAAa,CAACG,YAAd,CAA2BnG,eAAe,CAACY,kBAA3C,CAAZ;IACA,OAAOqD,GAAP;;;EAG6B,MAAzB6C,yBAAyB,CAAEjB,QAAF,EAAY;IACzC,MAAM,CAACC,KAAD,EAAQlE,MAAR,IAAkBiE,QAAQ,CAAC3C,KAAT,CAAe,GAAf,CAAxB;IACA,MAAM,KAAK6C,mBAAL,CAAyBnE,MAAzB,EAAiC5B,eAAe,CAACS,gBAAjD,CAAN;IACA,MAAMuF,aAAa,GAAG,MAAM,KAAKC,oBAAL,CAA0BrE,MAA1B,CAA5B;IACA,MAAMqC,GAAG,GAAG+B,aAAa,CAACG,YAAd,CAA2BnG,eAAe,CAACS,gBAA3C,EACT8C,OADS,CACD,SADC,EACUuC,KADV,EACiBvC,OADjB,CACyB,cADzB,EACyC3B,MADzC,CAAZ;IAEA,OAAOqC,GAAP;;;EAGuB,MAAnB8C,mBAAmB,CAAE3F,OAAF,EAAW4F,UAAX,EAAuB;IAC9C,MAAMhB,aAAa,GAAG,MAAM,KAAKC,oBAAL,CAA0B7E,OAA1B,CAA5B;IACA,OAAO4E,aAAa,CAACG,YAAd,IAA8B,CAAC,CAACH,aAAa,CAACG,YAAd,CAA2Ba,UAA3B,CAAvC;;;EAGwB,MAApBf,oBAAoB,CAAE7E,OAAF,EAAW;IACnC,IAAI4E,aAAa,GAAG,KAAKX,KAAL,IAAc,KAAKA,KAAL,CAAWrB,GAAX,CAAe5C,OAAf,CAAlC;;IACA,IAAI4E,aAAJ,EAAmB;MACjB,OAAOA,aAAa,CAACiB,KAArB;;;IAEF,MAAM;MAAErF,MAAF;MAAUC;QAAS,MAAM,KAAKqF,mBAAL,CAAyB9F,OAAzB,CAA/B;IACA4E,aAAa,GAAG,MAAM,KAAKmB,kBAAL,CAAwBvF,MAAxB,EAAgCC,IAAhC,CAAtB;IACA,KAAKwD,KAAL,IAAc,KAAKA,KAAL,CAAW+B,GAAX,CAAehG,OAAf,EAAwB4E,aAAxB,EAAuC,KAAKd,eAA5C,CAAd;IACA,OAAOc,aAAP;;;EAGsB,MAAlBmB,kBAAkB,CAAEvF,MAAF,EAAUC,IAAV,EAAgB;IACtC,MAAMwF,QAAQ,GAAIzF,MAAM,KAAK,WAAX,IAA0BA,MAAM,KAAK,YAAtC,GAAsD,MAAtD,GAA+D,OAAhF;IACA,MAAM0F,WAAW,GAAGzF,IAAI,CAAC0F,QAAL,OAAoB,KAApB,GAA4B,EAA5B,GAAkC,IAAG1F,IAAK,EAA9D;IACA,MAAM2F,aAAa,GAAG,aAAaC,IAAb,CAAkB7F,MAAlB,EAA0B,CAA1B,CAAtB,CAHsC;;IAItC,IAAI,CAAC4F,aAAL,EAAoB;MAClB,MAAM,IAAI1G,KAAJ,CAAW,mBAAkBc,MAAO,EAApC,CAAN;;;IAEF,IAAI;MACF,MAAM8F,SAAS,GAAG,MAAM,KAAKtC,IAAL,CAAUpB,GAAV,CAAe,GAAEqD,QAAS,MAAKG,aAAc,GAAEF,WAAY,uBAA3D,CAAxB;MACA,MAAMtB,aAAa,GAAG,MAAM0B,SAAS,CAAC5D,IAAV,EAA5B;MACA,OAAOkC,aAAP;KAHF,CAIE,OAAOvE,GAAP,EAAY;MACZ,IAAIA,GAAG,CAACkG,OAAJ,CAAYC,QAAZ,CAAqB,uBAArB,KAAiDnG,GAAG,CAACkG,OAAJ,CAAYC,QAAZ,CAAqB,kBAArB,CAArD,EAA+F;QAC7F,MAAM,IAAI/G,kBAAJ,CAAwB,qBAAoBe,MAAO,+CAAnD,CAAN;;;MAEF,IAAIH,GAAG,CAACkG,OAAJ,CAAYC,QAAZ,CAAqB,uBAArB,CAAJ,EAAmD;QACjD,MAAM,IAAI/G,kBAAJ,CAAwB,wBAAuBe,MAAO,EAAtD,CAAN;;;MAEF,IAAIH,GAAG,CAACkG,OAAJ,CAAYC,QAAZ,CAAqB,QAArB,CAAJ,EAAoC;QAClC,MAAM,IAAI/G,kBAAJ,CAAwB,8BAA6Be,MAAO,EAA5D,CAAN;;;MAEF,MAAMH,GAAN;;;;EAIqB,MAAnByF,mBAAmB,CAAE9F,OAAF,EAAW;IAClC,OAAO,KAAK+D,SAAL,CAAehE,QAAf,CAAwBC,OAAxB,CAAP;;;EAGuB,MAAnB2E,mBAAmB,CAAE3E,OAAF,EAAWyG,WAAX,EAAwB;IAC/C,IAAI,EAAC,MAAM,KAAKd,mBAAL,CAAyB3F,OAAzB,EAAkCyG,WAAlC,CAAP,CAAJ,EAA2D;MACzD,MAAM,IAAI/G,KAAJ,CAAW,uBAAsB+G,WAAY,UAASzG,OAAQ,GAA9D,CAAN;;;;AA7JiB;;ACPvB,MAAM0G,iBAAN,CAAwB;EACtB9G,WAAW,CAAE+G,KAAF,EAASC,GAAG,GAAG,IAAf,EAAqB;IAC9B,IAAIA,GAAG,KAAK,IAAZ,EAAkB;MAChBA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAb;;;IAEF,KAAKD,GAAL,GAAWA,GAAX;IACA,KAAKE,YAAL,GAAoBC,MAAM,CAACC,IAAP,CAAYL,KAAK,CAACM,IAAN,CAAW,EAAX,CAAZ,CAApB;;;EAG8B,OAAzBC,yBAAyB,CAAE;IAChCC,YADgC;IAEhCC,MAFgC;IAGhCC,EAHgC;IAIhCC;GAJ8B,EAK7B;IACD,IAAID,EAAE,CAACE,WAAP,EAAoB;MAClBF,EAAE,GAAGA,EAAE,CAACE,WAAH,EAAL;;;IAGF,OAAO,IAAIb,iBAAJ,CAAsB,CAC3BS,YAD2B,EAE3BC,MAAM,IAAI,GAFiB,EAG3BC,EAH2B,EAI3BC,OAJ2B,CAAtB,CAAP;;;EAQFE,IAAI,CAAEC,UAAF,EAAc;IAChB,IAAIC,OAAO,GAAG,KAAKd,GAAL,CAASe,OAAT,CAAiBC,OAAjB,CAAyBH,UAAzB,CAAd;IACA,IAAII,OAAO,GAAG,KAAKjB,GAAL,CAASkB,OAAT,CAAiBC,WAAjB,CAA6BL,OAA7B,CAAd;IACA,OAAO,KAAKd,GAAL,CAASoB,GAAT,CAAaR,IAAb,CAAkB,KAAKV,YAAvB,EAAqCe,OAArC,CAAP;;;EAGFI,MAAM,CAAEC,UAAF,EAAcC,SAAd,EAAyB;IAC7B,OAAO,KAAKvB,GAAL,CAASoB,GAAT,CAAaC,MAAb,CAAoB,KAAKnB,YAAzB,EAAuCqB,SAAvC,EAAkD,KAAKvB,GAAL,CAASwB,OAAT,CAAiBC,UAAjB,CAA4BH,UAA5B,CAAlD,CAAP;;;AAlCoB;;ACExB,MAAMI,kBAAN,CAAyB;EACvB1I,WAAW,CAAE2I,KAAF,EAAS;IAClB,KAAKA,KAAL,GAAaA,KAAb;;;EAEFC,yBAAyB,CAAEC,UAAF,EAAcC,UAAU,GAAG,IAA3B,EAAiC;IACxD,MAAM;MACJvB,YADI;MAEJC,MAFI;MAGJuB,UAHI;MAIJrB,OAJI;MAKJsB,MALI;MAMJT,SAAS,EAAEU;QACTJ,UAPJ;;IASA,IAAI,CAACI,iBAAD,IAAsBH,UAAU,KAAK,IAAzC,EAA+C;MAC7C,MAAM,IAAIhJ,KAAJ,CAAU,kCAAV,CAAN;;;IAGF,IAAI2H,EAAJ,EAAQc,SAAR;;IACA,IAAIU,iBAAJ,EAAuB;MACrB,IAAI,CAACJ,UAAU,CAACpB,EAAhB,EAAoB;QAClB,MAAM,IAAI3H,KAAJ,CAAU,sCAAV,CAAN;;;MAEF2H,EAAE,GAAGoB,UAAU,CAACpB,EAAhB;MACAc,SAAS,GAAGU,iBAAZ;KALF,MAMO;MACLxB,EAAE,GAAG,KAAKkB,KAAL,CAAWO,GAAX,EAAL;MACAX,SAAS,GAAGzB,iBAAiB,CAACQ,yBAAlB,CAA4C;QACtDC,YADsD;QAEtDC,MAFsD;QAGtDC,EAHsD;QAItDC;OAJU,EAKTE,IALS,CAKJkB,UALI,CAAZ;;;IAQF,OAAO;MACLvB,YADK;MAELwB,UAFK;MAGLrB,OAHK;MAILD,EAJK;MAKLD,MAAM,EAAEA,MAAM,IAAI,IALb;MAMLwB,MANK;MAOLT;KAPF;;;EAWFY,eAAe,CAAEC,cAAF,EAAkBC,SAAlB,EAA6BC,QAA7B,EAAuC;IACpD,OAAO;MAAEC,GAAG,EAAEH,cAAP;MAAuBE,QAAvB;MAAiCD;KAAxC;;;EAGFG,8BAA8B,CAAEC,QAAF,EAAY;IACxC,OAAO;MAAEA;KAAT;;;AAnDqB;;ACAzB,MAAMC,KAAN,CAAY;EACVR,GAAG,GAAI;IACL,OAAOS,MAAM,EAAb;;;AAFQ;;ACFZ,MAAMC,eAAN,SAA8B9J,KAA9B,CAAoC;EAClCE,WAAW,CAAE2G,OAAF,EAAWkD,OAAX,EAAoB;IAC7B,MAAMlD,OAAN;IACA,KAAKkD,OAAL,GAAeA,OAAf;;;AAHgC;;ACEpC,MAAMC,UAAN,CAAiB;EACf9J,WAAW,CAAEyC,KAAF,EAAS;IAClB,KAAKvC,GAAL,GAAW,IAAIsC,YAAJ,CAAiBC,KAAjB,EAAwB;MAAEG,OAAO,EAAE;KAAnC,CAAX;;;EAGc,MAAVpC,UAAU,CAAEJ,OAAF,EAAW2J,SAAX,EAAsB;IACpC,IAAI;MACF,MAAMpH,QAAQ,GAAG,MAAM,KAAKzC,GAAL,CAASM,UAAT,CAAoBJ,OAApB,CAAvB;;MACA,IAAIuC,QAAQ,CAACZ,MAAT,KAAoB,CAApB,IAAyBY,QAAQ,CAACX,MAAtC,EAA8C;QAC5C,MAAMC,IAAI,GAAGU,QAAQ,CAACX,MAAT,CAAgBgI,GAAhB,CAAoBC,MAAM,IAAI;UACzC,MAAM,CAAEC,QAAF,EAAYC,MAAZ,EAAoBtJ,IAApB,EAA0BE,IAA1B,IAAmCkJ,MAAM,CAAChI,IAAP,CAAYC,KAAZ,CAAkB,GAAlB,CAAzC;UACA,OAAO;YACLgI,QADK;YAELC,MAFK;YAGLtJ,IAHK;YAILE,IAJK;YAKLD,QAAQ,EAAE6B,QAAQ,CAACP;WALrB;SAFW,CAAb;QAUA2H,SAAS,CAAC,IAAD,EAAO9H,IAAP,CAAT;OAXF,MAYO,IAAIU,QAAQ,CAACZ,MAAT,KAAoB,CAApB,IAAyB,CAACY,QAAQ,CAACX,MAAvC,EAA+C;QACpD+H,SAAS,CAAC;UAAEpJ,IAAI,EAAE;SAAT,CAAT;OADK,MAEA;QACLoJ,SAAS,CAAC,IAAIjK,KAAJ,CAAU,wBAAV,CAAD,CAAT;;KAjBJ,CAmBE,OAAOsK,CAAP,EAAU;MACVL,SAAS,CAACK,CAAD,CAAT;;;;AA1BW;;ACFjB,MAAMC,oBAAN,SAAmCvK,KAAnC,CAAyC;EACvCE,WAAW,CAAE2G,OAAF,EAAWN,QAAX,EAAqB;IAC9B,MAAMM,OAAN;IACA,KAAKN,QAAL,GAAgBA,QAAhB;;;AAHqC;;ACAzC,MAAMiE,gBAAN,SAA+BxK,KAA/B,CAAqC;EACnCE,WAAW,CAAE2G,OAAF,EAAW4D,KAAX,EAAkB;IAC3B,MAAM5D,OAAN;IACA,KAAK4D,KAAL,GAAaA,KAAb;;;AAHiC;;ACcrC,MAAMC,aAAN,CAAoB;EAClBxK,WAAW,CAACC,GAAG,GAAG,IAAP,EAAawK,MAAM,GAAG,IAAtB,EAA4B9B,KAAK,GAAG,IAApC,EAA0C3B,GAAG,GAAG,IAAhD,EAAsD;IAC/D,IAAI9C,eAAe,GAAG,OAAO,IAA7B;;IAEA,IAAIuG,MAAM,KAAK,IAAf,EAAqB;MACnBA,MAAM,GAAGhI,KAAT;;;IAEF,IAAIxC,GAAG,KAAK,IAAZ,EAAkB;MAChBA,GAAG,GAAG,IAAI6J,UAAJ,CAAeW,MAAf,CAAN;MACAvG,eAAe,GAAG,CAAlB;;;IAEF,IAAI8C,GAAG,KAAK,IAAZ,EAAkB;MAChBA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAb;;;IAEF,KAAKD,GAAL,GAAWA,GAAX;IACA,KAAK0D,QAAL,GAAgB,IAAIzG,gBAAJ,CAAqBhE,GAArB,EAA0BwK,MAA1B,EAAkCvG,eAAlC,CAAhB;IACA,KAAKE,IAAL,GAAY,IAAIrB,IAAJ,CAAS0H,MAAT,CAAZ;IACA,KAAKE,kBAAL,GAA0B,IAAIjC,kBAAJ,CACxBC,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyB,IAAIe,KAAJ,EADD,CAA1B;IAGA,KAAK5C,iBAAL,GAAyBA,iBAAzB;;;AAIJ;AACA;AACA;AACA;;;EACoB,MAAZ8D,YAAY,CAACf,OAAD,EAAU;IAC1B,MAAM3E,WAAW,GAAG,MAAM,KAAKwF,QAAL,CAAc9F,iBAAd,CAAgCiF,OAAhC,CAA1B;IACA,MAAMlH,QAAQ,GAAG,MAAM,KAAKyB,IAAL,CAAUpB,GAAV,CAAckC,WAAd,CAAvB;IACA,MAAM;MAAE8D;QAAW,MAAMrG,QAAQ,CAACG,IAAT,EAAzB;IACA,OAAOkG,MAAP;;;AAIJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACoB,MAAZ6B,YAAY,CAAChG,QAAD,EAAWgE,UAAX,EAAuBC,UAAU,GAAG,IAApC,EAA0C;IAC1D,MAAMzD,UAAU,GAAG,MAAM,KAAKqF,QAAL,CAActF,gBAAd,CAA+BP,QAA/B,CAAzB;IACA,MAAMhC,IAAI,GAAG,KAAK8H,kBAAL,CAAwB/B,yBAAxB,CACXC,UADW,EAEXC,UAFW,CAAb;IAIA,MAAMnG,QAAQ,GAAG,MAAM,KAAKyB,IAAL,CAAUjB,QAAV,CAAmBkC,UAAnB,EAA+BxC,IAA/B,CAAvB;;IAEA,IAAIF,QAAQ,CAACmI,MAAT,KAAoBC,UAAU,CAACC,SAAnC,EAA8C;MAC5C,MAAM,IAAIpB,eAAJ,CAAqB,sBAAqB/E,QAAS,EAAnD,EAAsDA,QAAtD,CAAN;KADF,MAEO,IAAI,CAAClC,QAAQ,CAACsI,EAAd,EAAkB;MACvB,MAAM,IAAInL,KAAJ,CAAW,uBAAsB,MAAM6C,QAAQ,CAACuI,IAAT,EAAgB,EAAvD,CAAN;;;IAEF,MAAM;MAAEC;QAAW,MAAMxI,QAAQ,CAACG,IAAT,EAAzB;IACA,OAAOqI,MAAP;;;AAIJ;AACA;AACA;AACA;AACA;AACA;;;EACyB,MAAjBC,iBAAiB,CAACpC,MAAD,EAASa,OAAT,EAAkB;IACvC,MAAM5G,GAAG,GAAG,MAAM,KAAKyH,QAAL,CAAcpF,eAAd,CAA8BuE,OAA9B,EAAuCb,MAAvC,CAAlB;IACA,MAAMrG,QAAQ,GAAG,MAAM,KAAKyB,IAAL,CAAUpB,GAAV,CAAcC,GAAd,CAAvB;IACA,MAAMJ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;IACA,MAAM;MAAEuI;QAAUxI,IAAlB;IACA,OAAOwI,KAAP;;;AAIJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACwB,MAAhBC,gBAAgB,CAAC3E,OAAD,EAAU4B,SAAV,EAAqBsB,OAAO,GAAG,IAA/B,EAAqCb,MAAM,GAAG,IAA9C,EAAoD;IACxE,IAAIa,OAAO,IAAI,IAAX,IAAmBb,MAAM,KAAK,IAAlC,EAAwC;MACtC,MAAM,IAAIlJ,KAAJ,CAAU,uCAAV,CAAN;;;IAEF,IAAIyL,YAAJ;;IACA,IAAI1B,OAAJ,EAAa;MACX,IACEb,MAAM,KACL,MAAM,KAAK0B,QAAL,CAAc3E,mBAAd,CACL8D,OAAO,CAAC3H,KAAR,CAAc,GAAd,EAAmB,CAAnB,CADK,EAELlD,eAAe,CAACK,oBAFX,CADD,CADR,EAME;QACA,IAAI,MAAM,KAAK+L,iBAAL,CAAuBpC,MAAvB,EAA+Ba,OAA/B,CAAV,EAAmD;UACjD0B,YAAY,GAAG,KAAKvE,GAAL,CAASwE,MAAT,CAAgB/C,UAAhB,CAA2BO,MAA3B,CAAf;SADF,MAEO;UACL,OAAO,KAAP;;OAVJ,MAYO;QACL,MAAMyC,MAAM,GAAG,MAAM,KAAKf,QAAL,CAAc3E,mBAAd,CACnB8D,OAAO,CAAC3H,KAAR,CAAc,GAAd,EAAmB,CAAnB,CADmB,EAEnBlD,eAAe,CAACC,GAFG,CAArB;;QAIA,IAAIwM,MAAJ,EAAY;UACV,MAAMC,WAAW,GAAG,MAAM,KAAKd,YAAL,CAAkBf,OAAlB,CAA1B;UACA0B,YAAY,GAAG,KAAKvE,GAAL,CAASwE,MAAT,CAAgB/C,UAAhB,CAA2BiD,WAA3B,CAAf;SAFF,MAGO;UACL,OAAO,KAAP;;;;;IAKN,MAAMC,gBAAgB,GAAG,KAAK3E,GAAL,CAASwB,OAAT,CAAiBoD,UAAjB,CACvBL,YAAY,IAAIvC,MADO,CAAzB;;IAGA,IAAI;MACF,MAAM6C,QAAQ,GAAGlF,OAAO,CAAC0B,MAAR,CAAesD,gBAAgB,CAACpF,QAAjB,EAAf,EAA4CgC,SAA5C,CAAjB;MACA,OAAOsD,QAAP;KAFF,CAGE,OAAOpL,GAAP,EAAY;;MAEZ,OAAO,KAAP;;;;AAKN;AACA;AACA;AACA;AACA;;;EACwB,MAAhBqL,gBAAgB,CAACjC,OAAD,EAAU;IAC9B,IAAIkC,gBAAgB,GAAG,MAAM,KAAKrB,QAAL,CAAclF,sBAAd,CAAqCqE,OAArC,CAA7B;IACA,MAAMlH,QAAQ,GAAG,MAAM,KAAKyB,IAAL,CAAUpB,GAAV,CAAc+I,gBAAd,CAAvB;;IACA,IAAI,CAACpJ,QAAQ,CAACsI,EAAd,EAAkB;MAChB,MAAMpI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;MACA,MAAM,IAAIhD,KAAJ,CAAW,uBAAsBwD,IAAI,CAACC,SAAL,CAAeV,IAAf,CAAqB,EAAtD,CAAN;;;IAEF,MAAM;MAAEmJ,MAAF;MAAUjL;QAAS,MAAM4B,QAAQ,CAACG,IAAT,EAA/B;IACA,OAAO;MAAEkJ,MAAF;MAAUjL;KAAjB;;;EAGa,MAATkL,SAAS,CAACC,aAAD,EAAgB9C,cAAhB,EAAgCC,SAAhC,EAA2CC,QAAQ,GAAG,EAAtD,EAA0D;IACvE,IAAI,CAACF,cAAL,EAAqB;MACnB,MAAM,IAAItJ,KAAJ,CAAU,iCAAV,CAAN;;;IAEF,IAAIqM,YAAY,GAAG,MAAM,KAAKzB,QAAL,CAAcjF,eAAd,CAA8ByG,aAA9B,CAAzB;IACA,MAAMvJ,QAAQ,GAAG,MAAM,KAAKyB,IAAL,CAAUjB,QAAV,CACrBgJ,YADqB,EAErB,KAAKxB,kBAAL,CAAwBxB,eAAxB,CACEC,cADF,EAEEC,SAFF,EAGEC,QAHF,CAFqB,CAAvB;;IAQA,IAAI,CAAC3G,QAAQ,CAACsI,EAAd,EAAkB;MAChB,MAAMpI,IAAI,GAAG,MAAMF,QAAQ,CAACuI,IAAT,EAAnB;MACA,MAAM,IAAIpL,KAAJ,CAAW,uBAAsB+C,IAAK,EAAtC,CAAN;;;IAEF,OAAOF,QAAQ,CAACG,IAAT,EAAP;;;EAG4B,MAAxBsJ,wBAAwB,CAACF,aAAD,EAAgBzC,QAAhB,EAA0B;IACtD,IAAI,CAACA,QAAL,EAAe;MACb,MAAM,IAAI3J,KAAJ,CAAU,yCAAV,CAAN;;;IAEF,IAAIuM,qBAAqB,GACvB,MAAM,KAAK3B,QAAL,CAAchF,8BAAd,CAA6CwG,aAA7C,CADR;IAEA,MAAMvJ,QAAQ,GAAG,MAAM,KAAKyB,IAAL,CAAUjB,QAAV,CACrBkJ,qBADqB,EAErB,KAAK1B,kBAAL,CAAwBnB,8BAAxB,CAAuDC,QAAvD,CAFqB,CAAvB;;IAIA,IAAI9G,QAAQ,CAACmI,MAAT,KAAoBC,UAAU,CAACC,SAAnC,EAA8C;MAC5C,MAAM,IAAIpB,eAAJ,CACH,WAAUsC,aAAc,YADrB,EAEJA,aAFI,CAAN;;;IAKF,IAAI,CAACvJ,QAAQ,CAACsI,EAAd,EAAkB;MAChB,MAAM,IAAIpL,kBAAJ,CACH,sBAAqBqM,aAAc,+BADhC,CAAN;;;IAKF,MAAMrJ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;IACA,IAAI,CAACD,IAAI,CAACyJ,OAAV,EAAmB;MACjB,MAAM,IAAIzM,kBAAJ,CACJ,sDADI,CAAN;;;IAKF,OAAOgD,IAAP;;;EAG6C,MAAzC0J,yCAAyC,CAC7CL,aAD6C,EAE7C1E,MAF6C,EAG7C+C,KAH6C,EAI7ClE,QAJ6C,EAK7C;IACA,MAAMmG,6BAA6B,GAAG,GAAtC;;IACA,IAAI,CAAChF,MAAL,EAAa;MACX,MAAM,IAAI1H,KAAJ,CAAU,8BAAV,CAAN;;;IAEF,IAAIuM,qBAAqB,GACvB,MAAM,KAAK3B,QAAL,CAAc/E,+CAAd,CACJuG,aADI,CADR;IAIA,MAAMvJ,QAAQ,GAAG,MAAM,KAAKyB,IAAL,CAAUjB,QAAV,CAAmBkJ,qBAAnB,EAA0C;MAC/D7E,MAD+D;MAE/D+C,KAF+D;MAG/DlE;KAHqB,CAAvB;;IAKA,IAAI1D,QAAQ,CAACmI,MAAT,KAAoBC,UAAU,CAAC0B,cAAnC,EAAmD;MACjD,MAAM,IAAIpC,oBAAJ,CACH,YAAWhE,QAAS,gCAA+B6F,aAAc,EAD9D,EAEJ7F,QAFI,CAAN;;;IAKF,IAAI1D,QAAQ,CAACmI,MAAT,KAAoBC,UAAU,CAACC,SAAnC,EAA8C;MAC5C,MAAM,IAAIpB,eAAJ,CACH,WAAUsC,aAAc,YADrB,EAEJA,aAFI,CAAN;;;IAKF,IAAIvJ,QAAQ,CAACmI,MAAT,KAAoB0B,6BAAxB,EAAuD;MACrD,MAAM,IAAIlC,gBAAJ,CACH,WAAU4B,aAAc,wBAAuB3B,KAAM,EADlD,CAAN;;;IAIF,IAAI,CAAC5H,QAAQ,CAACsI,EAAd,EAAkB;MAChB,MAAM,IAAIpL,kBAAJ,CACH,sBAAqBqM,aAAc,+BADhC,CAAN;;;IAKF,MAAMrJ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;IACA,IAAI,CAACD,IAAI,CAACyJ,OAAV,EAAmB;MACjB,MAAM,IAAIzM,kBAAJ,CACJ,sDADI,CAAN;;;IAKF,OAAOgD,IAAP;;;EAGsB,MAAlB6J,kBAAkB,CAACC,kBAAD,EAAqBC,MAArB,EAA6B;IACnD,MAAMC,cAAc,GAAG,MAAM,KAAKnC,QAAL,CAAc9E,uBAAd,CAC3B+G,kBAD2B,CAA7B;IAGA,MAAMhK,QAAQ,GAAG,MAAM,KAAKyB,IAAL,CAAUjB,QAAV,CAAmB0J,cAAnB,EAAmCD,MAAnC,CAAvB;;IAEA,IAAI,CAACjK,QAAQ,CAACsI,EAAd,EAAkB;MAChB,MAAMpI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;MACA,MAAM,IAAIjD,kBAAJ,CAAuBgD,IAAI,CAAC8D,OAA5B,CAAN;;;IAGF,OAAOhE,QAAQ,CAACG,IAAT,EAAP;;;EAG0B,MAAtBgK,sBAAsB,CAACH,kBAAD,EAAqBC,MAArB,EAA6B;IACvD,IAAIG,kBAAkB,GAAG,MAAM,KAAKrC,QAAL,CAAc7E,2BAAd,CAC7B8G,kBAD6B,CAA/B;IAGA,MAAMhK,QAAQ,GAAG,MAAM,KAAKyB,IAAL,CAAUjB,QAAV,CAAmB4J,kBAAnB,EAAuCH,MAAvC,CAAvB;;IAEA,IAAI,CAACjK,QAAQ,CAACsI,EAAd,EAAkB;MAChB,MAAMpI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;MACA,MAAM,IAAIhD,KAAJ,CAAU+C,IAAI,CAAC8D,OAAf,CAAN;;;IAGF,OAAOhE,QAAQ,CAACG,IAAT,EAAP;;;EAGuB,MAAnBkK,mBAAmB,CAACC,kBAAD,EAAqB;IAC5C,IAAIC,mBAAmB,GAAG,MAAM,KAAKxC,QAAL,CAAc5E,yBAAd,CAC9BmH,kBAD8B,CAAhC;IAGA,MAAMtK,QAAQ,GAAG,MAAM,KAAKyB,IAAL,CAAUpB,GAAV,CAAckK,mBAAd,CAAvB;;IAEA,IAAIvK,QAAQ,CAACmI,MAAT,KAAoBC,UAAU,CAACC,SAAnC,EAA8C;MAC5C,MAAM,IAAIlL,KAAJ,CAAW,SAAQmN,kBAAmB,gBAAtC,CAAN;;;IAEF,IAAI,CAACtK,QAAQ,CAACsI,EAAd,EAAkB;MAChB,MAAMpI,IAAI,GAAG,MAAMF,QAAQ,CAACuI,IAAT,EAAnB;MACA,MAAM,IAAIpL,KAAJ,CAAW,uBAAsB+C,IAAK,EAAtC,CAAN;;;IAGF,OAAOF,QAAQ,CAACG,IAAT,EAAP;;;AA9SgB;;;;"}